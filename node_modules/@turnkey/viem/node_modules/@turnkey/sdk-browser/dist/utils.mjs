import '@turnkey/encoding';
import '@turnkey/crypto';
import { Buffer } from 'buffer';
import 'bs58check';
import 'hpke-js';
import '@turnkey/api-key-stamper';

const generateRandomBuffer = () => {
    const arr = new Uint8Array(32);
    crypto.getRandomValues(arr);
    return arr.buffer;
};
const base64UrlEncode = (challenge) => {
    return Buffer.from(challenge)
        .toString("base64")
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=/g, "");
};
Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function parseSession(token) {
    if (typeof token !== "string") {
        return token;
    }
    const [, payload] = token.split(".");
    if (!payload) {
        throw new Error("Invalid JWT: Missing payload");
    }
    const decoded = JSON.parse(atob(payload));
    const { exp, public_key: publicKey, session_type: sessionType, user_id: userId, organization_id: organizationId, } = decoded;
    if (!exp || !publicKey || !sessionType || !userId || !organizationId) {
        throw new Error("JWT payload missing required fields");
    }
    return {
        sessionType,
        userId,
        organizationId,
        expiry: exp,
        token: publicKey,
    };
}

export { base64UrlEncode, generateRandomBuffer, parseSession };
//# sourceMappingURL=utils.mjs.map
