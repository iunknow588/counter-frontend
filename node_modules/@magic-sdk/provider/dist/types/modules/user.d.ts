import { GetIdTokenConfiguration, MagicUserMetadata, GenerateIdTokenConfiguration, UserInfo, RequestUserInfoScope, RecoverAccountConfiguration, ShowSettingsConfiguration, EnableMFAConfiguration, EnableMFAEventHandlers, DisableMFAConfiguration, DisableMFAEventHandlers, RecoverAccountEventHandlers } from '@magic-sdk/types';
import { BaseModule } from './base-module';
type UserLoggedOutCallback = (loggedOut: boolean) => void;
export declare class UserModule extends BaseModule {
    getIdToken(configuration?: GetIdTokenConfiguration): import("../util").PromiEvent<string, {
        done: (result: string) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    generateIdToken(configuration?: GenerateIdTokenConfiguration): import("../util").PromiEvent<string, {
        done: (result: string) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    getInfo(): Promise<MagicUserMetadata>;
    isLoggedIn(): import("../util").PromiEvent<boolean, any>;
    logout(): import("../util").PromiEvent<boolean, any>;
    requestInfoWithUI(scope?: RequestUserInfoScope): import("../util").PromiEvent<UserInfo, {
        done: (result: UserInfo) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showSettings(configuration?: ShowSettingsConfiguration): import("../util").PromiEvent<string | null, {
        "send-new-phone-number": (phone_number: string) => void;
        "send-otp-code": (otp: string) => void;
        "start-edit-phone-number": () => void;
        cancel: () => void;
        "enter-new-phone-number": () => void;
        "enter-otp-code": () => void;
        "recovery-factor-already-exists": () => void;
        "malformed-phone-number": () => void;
        "invalid-otp-code": () => void;
    } & import("@magic-sdk/types").RecencyCheckEventHandlers & {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    recoverAccount(configuration: RecoverAccountConfiguration): import("../util").PromiEvent<string | boolean | null, RecoverAccountEventHandlers & {
        "UpdateEmail/new-email-needs-verification": () => void;
        "UpdateEmail/email-updated": () => void;
        "UpdateEmail/new-email-invalid-email-otp": () => void;
        "UpdateEmail/new-email-verification-email-not-deliverable": () => void;
        "UpdateEmail/new-email-verification-email-expired": () => void;
        "UpdateEmail/new-email-verification-email-sent": () => void;
        "UpdateEmail/new-email-invalid": () => void;
        "UpdateEmail/new-email-already-exists": () => void;
        "UpdateEmail/new-email-verification-cancel": () => void;
        "UpdateEmail/retry-with-new-email": (email?: string | undefined) => void;
        "UpdateEmail/new-email-verify-otp": (otp: string) => void;
    } & import("@magic-sdk/types").RecencyCheckEventHandlers & {
        done: (result: string | boolean | null) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    revealPrivateKey(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    getMetadata(): import("../util").PromiEvent<MagicUserMetadata, {
        done: (result: MagicUserMetadata) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    onUserLoggedOut(callback: UserLoggedOutCallback): void;
    enableMFA(configuration: EnableMFAConfiguration): import("../util").PromiEvent<string | boolean | null, EnableMFAEventHandlers & {
        done: (result: string | boolean | null) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    disableMFA(configuration: DisableMFAConfiguration): import("../util").PromiEvent<string | boolean | null, DisableMFAEventHandlers & {
        done: (result: string | boolean | null) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    private emitUserLoggedOut;
    private localForageKey;
    private localForageIsLoggedInKey;
    private userLoggedOutCallbacks;
}
export {};
