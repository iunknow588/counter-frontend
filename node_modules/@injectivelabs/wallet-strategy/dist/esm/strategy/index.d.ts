import { type WalletMetadata, WalletStrategyArguments } from '@injectivelabs/wallet-base';
import { BaseWalletStrategy } from '@injectivelabs/wallet-core';
export declare class WalletStrategy extends BaseWalletStrategy {
    constructor(args: WalletStrategyArguments);
    /**
     * This method is used to set the metadata for the wallet strategies.
     * In some cases we are going to set the metadata dynamically on the fly, and in
     * some cases we are recreating the wallet strategies from scratch using the new
     * metadata
     *
     * Case 1: Private Key is set dynamically
     * If we have a dynamically set private key,
     * we are creating a new PrivateKey strategy
     * with the specified private key (passed as metadata)
     *
     * Case 2: Similar to Case 1, but for Wallet Connect Metadata
     *
     */
    setMetadata(metadata?: WalletMetadata): void;
}
export declare const createStrategyFactory: (args: WalletStrategyArguments) => WalletStrategy;
