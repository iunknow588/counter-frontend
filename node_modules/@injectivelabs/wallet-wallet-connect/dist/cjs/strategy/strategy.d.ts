import { StdSignDoc, WalletDeviceType, BaseConcreteStrategy, ConcreteWalletStrategy, SendTransactionOptions } from '@injectivelabs/wallet-base';
import { Provider } from '@bangjelkoski/wc-ethereum-provider';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { TxRaw, TxResponse, DirectSignResponse, AminoSignResponse } from '@injectivelabs/sdk-ts';
export declare class WalletConnect extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    provider: Provider | undefined;
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(args?: {
        topic: string;
    }): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(_address: AccountAddress): Promise<string>;
    sendEvmTransaction(transaction: unknown, _options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    signEip712TypedData(eip712json: string, address: AccountAddress): Promise<string>;
    signAminoCosmosTransaction(_transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signArbitrary(signer: AccountAddress, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(_txHash: string): Promise<string>;
    getPubKey(): Promise<string>;
    onChainIdChanged(callback: (chain: string) => void): Promise<void>;
    onAccountChange(callback: (account: AccountAddress | string[]) => void): Promise<void>;
    private getWalletConnect;
    private getConnectedWalletConnect;
    private connectWalletConnect;
}
