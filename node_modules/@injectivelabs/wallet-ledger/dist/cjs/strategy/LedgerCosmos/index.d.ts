import { ChainId, AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { TxRaw, TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { StdSignDoc, WalletDeviceType, BaseConcreteStrategy, ConcreteWalletStrategy, SendTransactionOptions } from '@injectivelabs/wallet-base';
export declare class LedgerCosmos extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    private baseDerivationPath;
    private ledger;
    constructor(args: {
        chainId: ChainId;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(address: AccountAddress): Promise<string>;
    sendEvmTransaction(_txData: any, _options: {
        address: string;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    signAminoCosmosTransaction(transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signEip712TypedData(_eip712Json: string, _address: AccountAddress): Promise<string>;
    signArbitrary(signer: AccountAddress, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(_txHash: string): Promise<string>;
    getPubKey(address?: string): Promise<string>;
    private getWalletForAddress;
}
