"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerCosmos = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const wallet_base_1 = require("@injectivelabs/wallet-base");
const index_js_1 = __importDefault(require("./hw/index.js"));
const exceptions_2 = require("@injectivelabs/exceptions");
class LedgerCosmos extends wallet_base_1.BaseConcreteStrategy {
    baseDerivationPath;
    ledger;
    constructor(args) {
        super(args);
        this.baseDerivationPath = wallet_base_1.DEFAULT_BASE_DERIVATION_PATH;
        this.ledger = new index_js_1.default();
    }
    async getWalletDeviceType() {
        return Promise.resolve(wallet_base_1.WalletDeviceType.Hardware);
    }
    async enable() {
        return Promise.resolve(true);
    }
    async disconnect() {
        this.ledger = await this.ledger.refresh();
    }
    async getAddresses() {
        const { baseDerivationPath } = this;
        try {
            const accountManager = await this.ledger.getAccountManager();
            const wallets = await accountManager.getWallets(baseDerivationPath);
            return wallets.map((k) => k.address);
        }
        catch (e) {
            throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: wallet_base_1.WalletAction.GetAccounts,
            });
        }
    }
    async getSessionOrConfirm(address) {
        return Promise.resolve(`0x${Buffer.from(`Confirmation for ${address} at time: ${Date.now()}`).toString('hex')}`);
    }
    async sendEvmTransaction(_txData, _options) {
        throw new exceptions_2.CosmosWalletException(new Error('sendEvmTransaction is not supported. LedgerCosmos only supports sending cosmos transactions'), {
            code: exceptions_1.UnspecifiedErrorCode,
            context: wallet_base_1.WalletAction.SendEvmTransaction,
        });
    }
    async sendTransaction(transaction, options) {
        const { endpoints, txTimeout } = options;
        if (!endpoints) {
            throw new exceptions_1.WalletException(new Error('You have to pass endpoints.grpc within the options for using LedgerCosmos wallet'));
        }
        const txApi = new sdk_ts_1.TxGrpcApi(endpoints.grpc);
        const response = await txApi.broadcast(transaction, { txTimeout });
        if (response.code !== 0) {
            throw new exceptions_1.TransactionException(new Error(response.rawLog), {
                code: exceptions_1.UnspecifiedErrorCode,
                contextCode: response.code,
                contextModule: response.codespace,
            });
        }
        return response;
    }
    async signAminoCosmosTransaction(transaction) {
        try {
            const { derivationPath } = await this.getWalletForAddress(transaction.address);
            const ledger = await this.ledger.getInstance();
            const result = await ledger.sign(derivationPath, JSON.stringify((0, sdk_ts_1.sortObjectByKeys)(transaction.signDoc)));
            return {
                signed: undefined,
                signature: {
                    signature: Buffer.from(result.signature).toString('base64'),
                    pub_key: undefined,
                },
            };
        }
        catch (e) {
            throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: wallet_base_1.WalletAction.SignTransaction,
            });
        }
    }
    async signCosmosTransaction(_transaction) {
        throw new exceptions_2.CosmosWalletException(new Error('This wallet does not support signing using direct sign'), {
            code: exceptions_1.UnspecifiedErrorCode,
            context: wallet_base_1.WalletAction.SendTransaction,
        });
    }
    async signEip712TypedData(_eip712Json, _address) {
        throw new exceptions_2.CosmosWalletException(new Error('This wallet does not support signing Ethereum transactions'), {
            code: exceptions_1.UnspecifiedErrorCode,
            context: wallet_base_1.WalletAction.SendTransaction,
        });
    }
    async signArbitrary(signer, data) {
        try {
            const { derivationPath } = await this.getWalletForAddress(signer);
            const ledger = await this.ledger.getInstance();
            const result = await ledger.sign(derivationPath, (0, sdk_ts_1.toUtf8)(data));
            return Buffer.from(result.signature).toString('base64');
        }
        catch (e) {
            throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: wallet_base_1.WalletAction.SignTransaction,
            });
        }
    }
    async getEthereumChainId() {
        throw new exceptions_2.CosmosWalletException(new Error('getEthereumChainId is not supported on Keplr'), {
            code: exceptions_1.UnspecifiedErrorCode,
            context: wallet_base_1.WalletAction.GetChainId,
        });
    }
    async getEvmTransactionReceipt(_txHash) {
        throw new exceptions_2.CosmosWalletException(new Error('getEvmTransactionReceipt is not supported on Keplr'), {
            code: exceptions_1.UnspecifiedErrorCode,
            context: wallet_base_1.WalletAction.GetEvmTransactionReceipt,
        });
    }
    async getPubKey(address) {
        if (!address) {
            throw new exceptions_1.WalletException(new Error('You can only fetch PubKey corresponding to an address'));
        }
        const ledgerWalletInfo = await this.getWalletForAddress(address);
        return Buffer.from(ledgerWalletInfo.publicKey || '', 'hex').toString('base64');
    }
    async getWalletForAddress(address) {
        try {
            const { baseDerivationPath } = this;
            const accountManager = await this.ledger.getAccountManager();
            if (!accountManager.hasWalletForAddress(address)) {
                for (let i = 0; i < wallet_base_1.DEFAULT_ADDRESS_SEARCH_LIMIT / wallet_base_1.DEFAULT_NUM_ADDRESSES_TO_FETCH; i += 1) {
                    await accountManager.getWallets(baseDerivationPath);
                    if (accountManager.hasWalletForAddress(address)) {
                        return (await accountManager.getWalletForAddress(address));
                    }
                }
            }
            return (await accountManager.getWalletForAddress(address));
        }
        catch (e) {
            throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: wallet_base_1.WalletAction.GetAccounts,
            });
        }
    }
}
exports.LedgerCosmos = LedgerCosmos;
