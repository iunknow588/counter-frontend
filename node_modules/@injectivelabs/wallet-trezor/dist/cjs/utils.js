"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTypedData = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
/**
 * Calculates the domain_separator_hash and message_hash from an EIP-712 Typed Data object.
 *
 * The Trezor Model 1 does not currently support constructing the hash on the device,
 * so this function pre-computes them.
 *
 * @template {TypedMessage} T
 * @param {T} data - The EIP-712 Typed Data object.
 * @param {boolean} metamask_v4_compat - Set to `true` for compatibility with Metamask's signTypedData_v4 function.
 * @returns {{domain_separator_hash: string, message_hash?: string} & T} The hashes.
 */
const transformTypedData = (data, metamask_v4_compat = true) => {
    if (!metamask_v4_compat) {
        throw new exceptions_1.TrezorException(new Error('Trezor: Only version 4 of typed data signing is supported'));
    }
    const version = sdk_ts_1.SignTypedDataVersionV4;
    const { types, primaryType, domain, message } = (0, sdk_ts_1.TypedDataUtilsSanitizeData)(data);
    const domainSeparatorHash = (0, sdk_ts_1.TypedDataUtilsHashStruct)('EIP712Domain', (0, sdk_ts_1.sanitizeTypedData)(domain), types, version).toString('hex');
    let messageHash = null;
    if (primaryType !== 'EIP712Domain') {
        messageHash = (0, sdk_ts_1.TypedDataUtilsHashStruct)(primaryType, (0, sdk_ts_1.sanitizeTypedData)(message), types, version).toString('hex');
    }
    return {
        domain_separator_hash: domainSeparatorHash,
        message_hash: messageHash,
        ...data,
    };
};
exports.transformTypedData = transformTypedData;
