/* eslint-disable class-methods-use-this */
import { waitTxBroadcasted, createTxRawFromSigResponse, createSignDocFromTransaction, } from '@injectivelabs/sdk-ts';
import { ErrorType, UnspecifiedErrorCode, CosmosWalletException, TransactionException, } from '@injectivelabs/exceptions';
import { Wallet, WalletAction, WalletDeviceType, WalletEventListener, BaseConcreteStrategy, createCosmosSignDocFromSignDoc, } from '@injectivelabs/wallet-base';
import { capitalize } from '@injectivelabs/utils';
import { CosmosWallet } from './../wallet.js';
const cosmosWallets = [Wallet.Leap, Wallet.Ninji, Wallet.Keplr, Wallet.OWallet];
export class CosmosWalletStrategy extends BaseConcreteStrategy {
    wallet;
    cosmosWallet;
    constructor(args) {
        super({ ...args, chainId: args.chainId });
        if (!cosmosWallets.includes(args.wallet)) {
            throw new CosmosWalletException(new Error(`Cosmos Wallet for ${capitalize(args.wallet)} is not supported.`));
        }
        this.wallet = args.wallet;
        this.chainId = args.chainId;
        this.cosmosWallet = new CosmosWallet({
            wallet: args.wallet,
            chainId: args.chainId,
        });
    }
    async getWalletDeviceType() {
        const cosmosWallet = this.getCurrentCosmosWallet();
        const key = await cosmosWallet.getKey();
        return key.isNanoLedger
            ? Promise.resolve(WalletDeviceType.Hardware)
            : Promise.resolve(WalletDeviceType.Browser);
    }
    async enable() {
        const cosmosWallet = this.getCurrentCosmosWallet();
        return await cosmosWallet.checkChainIdSupport();
    }
    async disconnect() {
        const { wallet } = this;
        if (this.listeners[WalletEventListener.AccountChange]) {
            if (wallet === Wallet.Ninji) {
                window.ninji.off('accountsChanged', this.listeners[WalletEventListener.AccountChange]);
            }
            if ([Wallet.Keplr, Wallet.OWallet].includes(wallet)) {
                window.removeEventListener('keplr_keystorechange', this.listeners[WalletEventListener.AccountChange]);
            }
            if (wallet === Wallet.Leap) {
                window.removeEventListener('leap_keystorechange', this.listeners[WalletEventListener.AccountChange]);
            }
        }
        this.listeners = {};
    }
    async getAddresses() {
        const cosmosWallet = this.getCurrentCosmosWallet();
        try {
            const accounts = await cosmosWallet.getAccounts();
            return accounts.map((account) => account.address);
        }
        catch (e) {
            throw new CosmosWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                context: WalletAction.GetAccounts,
            });
        }
    }
    async getSessionOrConfirm(address) {
        return Promise.resolve(`0x${Buffer.from(`Confirmation for ${address} at time: ${Date.now()}`).toString('hex')}`);
    }
    // eslint-disable-next-line class-methods-use-this
    async sendEvmTransaction(_transaction, _options) {
        const { wallet } = this;
        throw new CosmosWalletException(new Error(`sendEvmTransaction is not supported. ${capitalize(wallet)} only supports sending cosmos transactions`), {
            code: UnspecifiedErrorCode,
            context: WalletAction.SendEvmTransaction,
        });
    }
    async sendTransaction(transaction, options) {
        const cosmosWallet = this.getCurrentCosmosWallet();
        const txRaw = createTxRawFromSigResponse(transaction);
        if (!options.endpoints) {
            throw new CosmosWalletException(new Error('You have to pass endpoints within the options to broadcast transaction'));
        }
        try {
            const txHash = await cosmosWallet.broadcastTx(txRaw);
            return await waitTxBroadcasted(txHash, options);
        }
        catch (e) {
            if (e instanceof TransactionException) {
                throw e;
            }
            throw new TransactionException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                context: WalletAction.SendTransaction,
            });
        }
    }
    async signAminoCosmosTransaction(transaction) {
        const cosmosWallet = this.getCurrentCosmosWallet();
        const signer = await cosmosWallet.getOfflineAminoSigner();
        try {
            return await signer.signAmino(transaction.address, transaction.signDoc);
        }
        catch (e) {
            throw new CosmosWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                context: WalletAction.SignTransaction,
            });
        }
    }
    async signCosmosTransaction(transaction) {
        const cosmosWallet = this.getCurrentCosmosWallet();
        const signer = await cosmosWallet.getOfflineSigner();
        const signDoc = createSignDocFromTransaction(transaction);
        try {
            return await signer.signDirect(transaction.address, createCosmosSignDocFromSignDoc(signDoc));
        }
        catch (e) {
            throw new CosmosWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                context: WalletAction.SendTransaction,
            });
        }
    }
    async signEip712TypedData(_eip712TypedData, _address) {
        throw new CosmosWalletException(new Error('This wallet does not support signing Ethereum transactions'), {
            code: UnspecifiedErrorCode,
            context: WalletAction.SendTransaction,
        });
    }
    async signArbitrary(signer, data) {
        const cosmosWallet = this.getCurrentCosmosWallet();
        try {
            const signature = await cosmosWallet.signArbitrary({ data, signer });
            return signature;
        }
        catch (e) {
            throw new CosmosWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                context: WalletAction.SignArbitrary,
            });
        }
    }
    async getEthereumChainId() {
        const { wallet } = this;
        throw new CosmosWalletException(new Error(`getEthereumChainId is not supported on ${capitalize(wallet)}`), {
            code: UnspecifiedErrorCode,
            context: WalletAction.GetChainId,
        });
    }
    async getEvmTransactionReceipt(_txHash) {
        const { wallet } = this;
        throw new CosmosWalletException(new Error(`getEvmTransactionReceipt is not supported on ${capitalize(wallet)}`), {
            code: UnspecifiedErrorCode,
            context: WalletAction.GetEvmTransactionReceipt,
        });
    }
    async getPubKey() {
        const cosmosWallet = this.getCurrentCosmosWallet();
        const key = await cosmosWallet.getKey();
        return Buffer.from(key.pubKey).toString('base64');
    }
    async onAccountChange(callback) {
        const { wallet } = this;
        const listener = async () => {
            const [account] = await this.getAddresses();
            callback(account);
        };
        this.listeners = {
            [WalletEventListener.AccountChange]: listener,
        };
        if (wallet === Wallet.Ninji) {
            window.ninji.on('accountsChanged', listener);
        }
        if ([Wallet.Keplr, Wallet.OWallet].includes(wallet)) {
            window.addEventListener('keplr_keystorechange', listener);
        }
        if (wallet === Wallet.Leap) {
            window.addEventListener('leap_keystorechange', listener);
        }
    }
    getCosmosWallet(chainId) {
        const { wallet, cosmosWallet } = this;
        return !cosmosWallet ? new CosmosWallet({ chainId, wallet }) : cosmosWallet;
    }
    getCurrentCosmosWallet() {
        const { wallet, cosmosWallet } = this;
        if (!cosmosWallet) {
            throw new CosmosWalletException(new Error(`Please install the ${capitalize(wallet)} wallet extension`), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletNotInstalledError,
                context: WalletAction.SignTransaction,
            });
        }
        return cosmosWallet;
    }
}
