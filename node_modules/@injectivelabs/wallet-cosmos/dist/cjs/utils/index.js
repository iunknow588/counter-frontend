"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmCosmosAddress = exports.isCosmosWalletInstalled = void 0;
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const wallet_base_1 = require("@injectivelabs/wallet-base");
const utils_1 = require("@injectivelabs/utils");
const exceptions_1 = require("@injectivelabs/exceptions");
const wallet_js_1 = require("./../wallet.js");
const index_js_1 = require("./../data/index.js");
const isCosmosWalletInstalled = (wallet) => {
    const $window = (typeof window !== 'undefined' ? window : {});
    switch (wallet) {
        case wallet_base_1.Wallet.Keplr:
            return $window.keplr !== undefined;
        case wallet_base_1.Wallet.Ninji:
            return $window.ninji !== undefined;
        case wallet_base_1.Wallet.Leap:
            return $window.leap !== undefined;
        case wallet_base_1.Wallet.OWallet:
            return $window.oWallet !== undefined;
        default:
            return false;
    }
};
exports.isCosmosWalletInstalled = isCosmosWalletInstalled;
const confirmCosmosAddress = async ({ wallet, chainId, injectiveAddress, }) => {
    if (!index_js_1.cosmosWallets.includes(wallet)) {
        throw new exceptions_1.CosmosWalletException(new Error(`Cosmos Wallet for ${(0, utils_1.capitalize)(wallet)} is not supported.`));
    }
    const cosmosWallet = new wallet_js_1.CosmosWallet({ chainId, wallet });
    const key = await cosmosWallet.getKey();
    const publicKey = sdk_ts_1.PublicKey.fromBase64(Buffer.from(key.pubKey).toString('base64'));
    const { address: derivedAddress } = publicKey.toAddress();
    if (derivedAddress !== injectiveAddress) {
        throw new exceptions_1.CosmosWalletException(new Error(`Connected ${(0, utils_1.capitalize)(wallet)} address is wrong. Please update Injective on ${(0, utils_1.capitalize)(wallet)}.`));
    }
};
exports.confirmCosmosAddress = confirmCosmosAddress;
