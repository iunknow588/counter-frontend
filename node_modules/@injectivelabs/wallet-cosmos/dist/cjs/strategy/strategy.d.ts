import { TxRaw, TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { ChainId, CosmosChainId, AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { Wallet, StdSignDoc, WalletDeviceType, BaseConcreteStrategy, ConcreteWalletStrategy, SendTransactionOptions } from '@injectivelabs/wallet-base';
import { CosmosWallet } from './../wallet.js';
export declare class CosmosWalletStrategy extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    wallet: Wallet;
    private cosmosWallet;
    constructor(args: {
        chainId: ChainId | CosmosChainId;
        endpoints?: {
            rest: string;
            rpc: string;
        };
    } & {
        wallet: Wallet;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(address: AccountAddress): Promise<string>;
    sendEvmTransaction(_transaction: unknown, _options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: DirectSignResponse | TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    signAminoCosmosTransaction(transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: AccountAddress;
    }): Promise<import("@cosmjs/proto-signing").DirectSignResponse>;
    signEip712TypedData(_eip712TypedData: string, _address: AccountAddress): Promise<string>;
    signArbitrary(signer: string, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(_txHash: string): Promise<string>;
    getPubKey(): Promise<string>;
    onAccountChange(callback: (account: AccountAddress | string[]) => void): Promise<void>;
    getCosmosWallet(chainId: ChainId): CosmosWallet;
    private getCurrentCosmosWallet;
}
