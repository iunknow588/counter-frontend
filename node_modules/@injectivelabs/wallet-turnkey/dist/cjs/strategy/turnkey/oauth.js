"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurnkeyOauthWallet = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const consts_js_1 = require("../consts.js");
class TurnkeyOauthWallet {
    static async generateOAuthNonce(iframeClient) {
        try {
            const targetPublicKey = iframeClient.iframePublicKey;
            if (!targetPublicKey) {
                throw new exceptions_1.WalletException(new Error('Target public key not found'));
            }
            return Array.from((0, sdk_ts_1.sha256)(new TextEncoder().encode(targetPublicKey)))
                .map((b) => b.toString(16).padStart(2, '0'))
                .join('');
        }
        catch (e) {
            throw new exceptions_1.WalletException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: 'turnkey-generate-oauth-nonce',
            });
        }
    }
    static async oauthLogin(args) {
        const { client, iframeClient, expirationSeconds } = args;
        const path = args.oauthLoginPath || consts_js_1.TURNKEY_OAUTH_PATH;
        try {
            const targetPublicKey = iframeClient.iframePublicKey;
            if (!targetPublicKey) {
                throw new exceptions_1.WalletException(new Error('Target public key not found'));
            }
            // client.$post is undefined, resorting to this for now
            const response = await client.post(path, {
                targetPublicKey,
                oidcToken: args.oidcToken,
                providerName: args.providerName,
                expirationSeconds: (expirationSeconds || consts_js_1.DEFAULT_TURNKEY_REFRESH_SECONDS)?.toString(),
            });
            return response.data;
        }
        catch (e) {
            throw new exceptions_1.WalletException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: 'turnkey-oauth-login',
            });
        }
    }
}
exports.TurnkeyOauthWallet = TurnkeyOauthWallet;
