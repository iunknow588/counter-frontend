"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurnkeyWallet = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const wallet_base_1 = require("@injectivelabs/wallet-base");
const viem_1 = require("@turnkey/viem");
const utils_1 = require("@injectivelabs/utils");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const sdk_browser_1 = require("@turnkey/sdk-browser");
const consts_js_1 = require("../consts.js");
const otp_js_1 = require("./otp.js");
const types_js_1 = require("../types.js");
const oauth_js_1 = require("./oauth.js");
const utils_js_1 = require("../../utils.js");
class TurnkeyWallet {
    otpId;
    turnkey;
    organizationId;
    client;
    metadata;
    iframeClient;
    accountMap = {};
    setMetadata(metadata) {
        this.metadata = { ...this.metadata, ...metadata };
    }
    constructor(metadata) {
        this.metadata = metadata;
        this.organizationId = metadata.organizationId;
        this.client = new utils_1.HttpRestClient(metadata.apiServerEndpoint);
    }
    static async getTurnkeyInstance(metadata) {
        const { turnkey, iframeClient } = await createTurnkeyIFrame(metadata);
        return {
            turnkey,
            iframeClient,
        };
    }
    async getTurnkey() {
        if (!this.iframeClient) {
            await this.initFrame();
        }
        if (!this.turnkey) {
            this.turnkey = new sdk_browser_1.Turnkey(this.metadata);
        }
        return this.turnkey;
    }
    async getIframeClient() {
        if (!this.iframeClient) {
            await this.initFrame();
        }
        if (!this.iframeClient) {
            throw new exceptions_1.WalletException(new Error('Iframe client not initialized'));
        }
        return this.iframeClient;
    }
    async getSession(existingCredentialBundle) {
        const { metadata } = this;
        const iframeClient = await this.getIframeClient();
        const turnkey = await this.getTurnkey();
        const currentSession = await turnkey.getSession();
        const organizationId = currentSession?.organizationId || metadata.defaultOrganizationId;
        const credentialBundle = existingCredentialBundle || currentSession?.token;
        if (!credentialBundle) {
            return {
                session: undefined,
                organizationId,
            };
        }
        try {
            const loginResult = await iframeClient.injectCredentialBundle(credentialBundle);
            // If there is no session, we want to force a refresh to enable to browser SDK to handle key storage and proper session management.
            await iframeClient.refreshSession({
                sessionType: sdk_browser_1.SessionType.READ_WRITE,
                targetPublicKey: iframeClient.iframePublicKey,
                expirationSeconds: this.metadata.expirationSeconds,
            });
            const [session, user] = await Promise.all([
                turnkey.getSession(),
                iframeClient.getWhoami(),
            ]);
            const actualOrganizationId = user?.organizationId || session?.organizationId || organizationId;
            if (!loginResult) {
                return {
                    session: undefined,
                    organizationId: actualOrganizationId,
                };
            }
            return {
                session,
                organizationId: actualOrganizationId,
            };
        }
        catch {
            throw new exceptions_1.TurnkeyWalletSessionException(new Error('Session expired. Please login again.'));
        }
    }
    async getAccounts() {
        const iframeClient = await this.getIframeClient();
        if (!this.organizationId) {
            return [];
        }
        try {
            const response = await iframeClient.getWallets({
                organizationId: this.organizationId,
            });
            const accounts = await Promise.allSettled(response.wallets.map((wallet) => iframeClient.getWalletAccounts({
                walletId: wallet.walletId,
                organizationId: this.organizationId,
            })));
            const filteredAccounts = accounts
                .filter((account) => account.status === 'fulfilled')
                .flatMap((result) => result.value?.accounts)
                .filter((wa) => !!wa &&
                wa.addressFormat === 'ADDRESS_FORMAT_ETHEREUM' &&
                !!wa.address);
            return filteredAccounts.map((account) => (0, sdk_ts_1.getInjectiveAddress)(account.address));
        }
        catch (e) {
            if (e.code === types_js_1.TurnkeyErrorCodes.UserLoggedOut) {
                throw new exceptions_1.WalletException(new Error('User is not logged in'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: wallet_base_1.WalletAction.GetAccounts,
                    contextCode: types_js_1.TurnkeyErrorCodes.UserLoggedOut,
                });
            }
            throw new exceptions_1.WalletException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: 'turnkey-wallet-get-accounts',
            });
        }
    }
    async getOrCreateAndGetAccount(address, organizationId) {
        const { accountMap } = this;
        const iframeClient = await this.getIframeClient();
        if (accountMap[address] || accountMap[address.toLowerCase()]) {
            return accountMap[address] || accountMap[address.toLowerCase()];
        }
        if (!organizationId) {
            throw new exceptions_1.WalletException(new Error('Organization ID is required'));
        }
        iframeClient.config.organizationId = organizationId;
        if (!address) {
            throw new exceptions_1.WalletException(new Error('Account address not found'));
        }
        const turnkeyAccount = await (0, viem_1.createAccount)({
            organizationId,
            signWith: address,
            client: iframeClient,
        });
        this.accountMap[address] = turnkeyAccount;
        return turnkeyAccount;
    }
    async injectAndRefresh(credentialBundle, options) {
        const expirationSeconds = options.expirationSeconds || consts_js_1.DEFAULT_TURNKEY_REFRESH_SECONDS;
        const iframeClient = await this.getIframeClient();
        await iframeClient.injectCredentialBundle(credentialBundle);
        await iframeClient.loginWithBundle({
            bundle: credentialBundle,
            expirationSeconds,
        });
        await iframeClient.refreshSession({
            sessionType: sdk_browser_1.SessionType.READ_WRITE,
            targetPublicKey: iframeClient.iframePublicKey,
            expirationSeconds,
        });
        const session = await this.turnkey?.getSession();
        if (!session) {
            throw new exceptions_1.TurnkeyWalletSessionException(new Error('Session expired. Please login again.'));
        }
        this.organizationId = session.organizationId;
        this.metadata.organizationId = session.organizationId;
        // Refresh the session 2 minutes before it expires
        setTimeout(() => {
            iframeClient.refreshSession({
                expirationSeconds: session?.expiry,
                sessionType: sdk_browser_1.SessionType.READ_WRITE,
                targetPublicKey: iframeClient.iframePublicKey,
            });
        }, (parseInt(expirationSeconds) - 120) * 1000);
        return;
    }
    async initOTP(email) {
        const iframeClient = await this.getIframeClient();
        const result = await otp_js_1.TurnkeyOtpWallet.initEmailOTP({
            client: this.client,
            iframeClient,
            email,
            otpInitPath: this.metadata.otpInitPath || consts_js_1.TURNKEY_OTP_INIT_PATH,
        });
        if (!result || !result.otpId) {
            throw new exceptions_1.WalletException(new Error('Failed to initialize OTP'));
        }
        if (result?.organizationId) {
            this.organizationId = result.organizationId;
        }
        if (result?.otpId) {
            this.otpId = result.otpId;
        }
        return result;
    }
    async confirmOTP(otpCode) {
        const iframeClient = await this.getIframeClient();
        if (!this.otpId) {
            throw new exceptions_1.WalletException(new Error('OTP ID is required'));
        }
        const result = await otp_js_1.TurnkeyOtpWallet.confirmEmailOTP({
            otpCode,
            iframeClient,
            client: this.client,
            emailOTPId: this.otpId,
            organizationId: this.organizationId,
            otpVerifyPath: this.metadata.otpVerifyPath || consts_js_1.TURNKEY_OTP_VERIFY_PATH,
        });
        if (!result || !result.credentialBundle) {
            throw new exceptions_1.WalletException(new Error('Failed to confirm OTP'));
        }
        await this.injectAndRefresh(result.credentialBundle, {
            organizationId: result.organizationId,
            expirationSeconds: this.metadata.expirationSeconds,
        });
        return result;
    }
    async initOAuth(provider) {
        const iframeClient = await this.getIframeClient();
        const nonce = await oauth_js_1.TurnkeyOauthWallet.generateOAuthNonce(iframeClient);
        if (provider === wallet_base_1.TurnkeyProvider.Apple) {
            // TODO: implement the ability to generate Apple OAuth URL
            return nonce;
        }
        if (!this.metadata?.googleClientId || !this.metadata?.googleRedirectUri) {
            throw new exceptions_1.WalletException(new Error('googleClientId and googleRedirectUri are required'));
        }
        return (0, utils_js_1.generateGoogleUrl)({
            nonce,
            clientId: this.metadata.googleClientId,
            redirectUri: this.metadata.googleRedirectUri,
        });
    }
    async confirmOAuth(provider, oidcToken) {
        const iframeClient = await this.getIframeClient();
        const oauthResult = await oauth_js_1.TurnkeyOauthWallet.oauthLogin({
            oidcToken,
            iframeClient,
            client: this.client,
            providerName: provider.toString(),
            oauthLoginPath: this.metadata.oauthLoginPath || consts_js_1.TURNKEY_OAUTH_PATH,
        });
        if (!oauthResult || !oauthResult.credentialBundle) {
            throw new exceptions_1.WalletException(new Error('Unexpected OAuth result'));
        }
        await this.injectAndRefresh(oauthResult.credentialBundle, {
            organizationId: oauthResult.organizationId,
            expirationSeconds: this.metadata.expirationSeconds,
        });
        return oauthResult.credentialBundle;
    }
    async refreshSession() {
        const session = await this.getSession();
        if (session.session?.token) {
            await this.injectAndRefresh(session.session.token, {
                expirationSeconds: this.metadata.expirationSeconds || consts_js_1.DEFAULT_TURNKEY_REFRESH_SECONDS,
            });
            return session.session.token;
        }
        throw new exceptions_1.TurnkeyWalletSessionException(new Error('Session expired. Please login again.'));
    }
    async initFrame() {
        const { metadata } = this;
        const { turnkey, iframeClient } = await createTurnkeyIFrame(metadata);
        this.turnkey = turnkey;
        this.iframeClient = iframeClient;
    }
}
exports.TurnkeyWallet = TurnkeyWallet;
async function createTurnkeyIFrame(metadata) {
    const turnkey = new sdk_browser_1.Turnkey(metadata);
    const turnkeyAuthIframeElementId = metadata.iframeElementId || 'turnkey-auth-iframe-element-id';
    if (!metadata.iframeContainerId) {
        throw new exceptions_1.GeneralException(new Error('iframeContainerId is required'));
    }
    if (!turnkey) {
        throw new exceptions_1.GeneralException(new Error('Turnkey is not initialized'));
    }
    const iframe = document.getElementById(metadata.iframeContainerId);
    if (!iframe) {
        throw new exceptions_1.GeneralException(new Error('iframe is null'));
    }
    const existingIframeClient = document.getElementById(turnkeyAuthIframeElementId);
    if (existingIframeClient) {
        existingIframeClient.remove();
    }
    const iframeClient = await turnkey.iframeClient({
        iframeContainer: iframe,
        iframeElementId: turnkeyAuthIframeElementId,
        iframeUrl: metadata?.iframeUrl || 'https://auth.turnkey.com',
    });
    return {
        turnkey,
        iframeClient,
    };
}
