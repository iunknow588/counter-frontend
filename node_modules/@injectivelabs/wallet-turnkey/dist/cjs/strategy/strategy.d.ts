import { TxRaw, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { HttpRestClient } from '@injectivelabs/utils';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { TurnkeyIframeClient } from '@turnkey/sdk-browser';
import { StdSignDoc, WalletDeviceType, type WalletMetadata, BaseConcreteStrategy, ConcreteWalletStrategy, SendTransactionOptions, WalletStrategyEthereumOptions, ConcreteEthereumWalletStrategyArgs } from '@injectivelabs/wallet-base';
import { TurnkeyWallet } from './turnkey/turnkey.js';
export declare class TurnkeyWalletStrategy extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    turnkeyWallet?: TurnkeyWallet;
    ethereumOptions: WalletStrategyEthereumOptions;
    client: HttpRestClient;
    constructor(args: ConcreteEthereumWalletStrategyArgs & {
        apiServerEndpoint?: string;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    setMetadata(metadata?: {
        turnkey?: Partial<WalletMetadata['turnkey']>;
    }): void;
    enable(): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(_address?: string): Promise<string>;
    getWalletClient<TurnkeyWallet>(): Promise<TurnkeyWallet>;
    sendEvmTransaction(transaction: unknown, args: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<any>;
    signEip712TypedData(eip712json: string, address: AccountAddress): Promise<string>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signAminoCosmosTransaction(_transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signArbitrary(_signer: AccountAddress, _data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(txHash: string, ethereumChainId?: EthereumChainId): Promise<Record<string, any>>;
    getPubKey(): Promise<string>;
    getIframeClient(): Promise<TurnkeyIframeClient>;
    private getTurnkeyWallet;
    private getOrganizationId;
}
