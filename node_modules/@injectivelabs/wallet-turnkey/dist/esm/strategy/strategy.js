/* eslint-disable class-methods-use-this */
import { TxGrpcApi, } from '@injectivelabs/sdk-ts';
import { ErrorType, WalletException, UnspecifiedErrorCode, TransactionException, CosmosWalletException, } from '@injectivelabs/exceptions';
import { getAddress } from 'viem';
import { sleep, HttpRestClient } from '@injectivelabs/utils';
import { http, createPublicClient, createWalletClient, } from 'viem';
import { WalletAction, WalletDeviceType, BaseConcreteStrategy, } from '@injectivelabs/wallet-base';
import { TurnkeyErrorCodes } from './types.js';
import { TurnkeyWallet } from './turnkey/turnkey.js';
import { DEFAULT_EVM_CHAIN_CONFIG } from './consts.js';
export class TurnkeyWalletStrategy extends BaseConcreteStrategy {
    turnkeyWallet;
    ethereumOptions;
    client;
    constructor(args) {
        super(args);
        const endpoint = args.apiServerEndpoint || this.metadata?.turnkey?.apiServerEndpoint;
        if (!endpoint) {
            throw new WalletException(new Error('apiServerEndpoint is required'));
        }
        this.client = new HttpRestClient(endpoint);
        this.ethereumOptions = args.ethereumOptions;
    }
    async getWalletDeviceType() {
        return Promise.resolve(WalletDeviceType.Browser);
    }
    setMetadata(metadata) {
        if (metadata?.turnkey) {
            this.metadata = {
                ...this.metadata,
                turnkey: {
                    ...this.metadata?.turnkey,
                    ...metadata.turnkey,
                },
            };
            this.turnkeyWallet?.setMetadata(this.metadata?.turnkey);
        }
    }
    async enable() {
        const turnkeyWallet = await this.getTurnkeyWallet();
        try {
            const session = await turnkeyWallet.getSession();
            if (session.session) {
                // User is already logged in, we don't need to do anything in the next steps
                if (this.metadata?.turnkey) {
                    this.metadata.turnkey.session = session.session;
                }
                return true;
            }
            return !!(await turnkeyWallet.getIframeClient());
        }
        catch (e) {
            return false;
        }
    }
    async disconnect() {
        const turnkeyWallet = await this.getTurnkeyWallet();
        const turnkey = await turnkeyWallet.getTurnkey();
        const isUserLoggedIn = await turnkey.getSession();
        if (!isUserLoggedIn) {
            return;
        }
        await turnkey.logout();
    }
    async getAddresses() {
        const turnkeyWallet = await this.getTurnkeyWallet();
        await turnkeyWallet.getSession();
        try {
            return await turnkeyWallet.getAccounts();
        }
        catch (e) {
            if (e.contextCode === TurnkeyErrorCodes.UserLoggedOut) {
                await this.disconnect();
                throw e;
            }
            throw new WalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.GetAccounts,
            });
        }
    }
    async getSessionOrConfirm(_address) {
        const turnkeyWallet = await this.getTurnkeyWallet();
        return await turnkeyWallet.refreshSession();
    }
    async getWalletClient() {
        return (await this.getTurnkeyWallet());
    }
    async sendEvmTransaction(transaction, args) {
        try {
            const options = this.ethereumOptions;
            const turnkeyWallet = await this.getTurnkeyWallet();
            const organizationId = await this.getOrganizationId();
            const chainId = args.ethereumChainId || options.ethereumChainId;
            const url = options.rpcUrl || options.rpcUrls?.[args.ethereumChainId];
            if (!url) {
                throw new WalletException(new Error('Please pass rpcUrl within the ethereumOptions'), {
                    code: UnspecifiedErrorCode,
                    context: WalletAction.SendEvmTransaction,
                });
            }
            const account = await turnkeyWallet.getOrCreateAndGetAccount(getAddress(args.address), organizationId);
            const accountClient = createWalletClient({
                account: account,
                chain: {
                    ...DEFAULT_EVM_CHAIN_CONFIG,
                    id: chainId,
                    rpcUrls: {
                        default: {
                            http: [url],
                        },
                    },
                },
                transport: http(url),
            });
            const preparedTransaction = await accountClient.prepareTransactionRequest(transaction);
            delete preparedTransaction.account;
            const signedTransaction = await accountClient.signTransaction(preparedTransaction);
            const tx = await accountClient.sendRawTransaction({
                serializedTransaction: signedTransaction,
            });
            return tx;
        }
        catch (e) {
            throw new WalletException(e, {
                code: UnspecifiedErrorCode,
                context: WalletAction.SendEvmTransaction,
            });
        }
    }
    async sendTransaction(transaction, options) {
        const { endpoints, txTimeout } = options;
        if (!endpoints) {
            throw new WalletException(new Error('You have to pass endpoints.grpc within the options for using Turnkey wallet'));
        }
        const txApi = new TxGrpcApi(endpoints.grpc);
        const response = await txApi.broadcast(transaction, { txTimeout });
        if (response.code !== 0) {
            throw new TransactionException(new Error(response.rawLog), {
                code: UnspecifiedErrorCode,
                contextCode: response.code,
                contextModule: response.codespace,
            });
        }
        return response;
    }
    async signEip712TypedData(eip712json, address) {
        const turnkeyWallet = await this.getTurnkeyWallet();
        const organizationId = await this.getOrganizationId();
        //? Turnkey expects the case sensitive address and the current impl of getChecksumAddress from sdk-ts doesn't play nice with browser envs
        const checksumAddress = getAddress(address);
        const account = await turnkeyWallet.getOrCreateAndGetAccount(checksumAddress, organizationId);
        if (!account) {
            throw new WalletException(new Error('Turnkey account not found'));
        }
        let parsedData;
        try {
            parsedData = JSON.parse(eip712json);
        }
        catch (e) {
            throw new WalletException(new Error('Failed to parse EIP-712 data: Invalid JSON format'), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.SignTransaction,
            });
        }
        const signature = await account.signTypedData(parsedData);
        return signature;
    }
    // eslint-disable-next-line class-methods-use-this
    async signCosmosTransaction(_transaction) {
        throw new WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
            code: UnspecifiedErrorCode,
            type: ErrorType.WalletError,
            contextModule: WalletAction.SignTransaction,
        });
    }
    async signAminoCosmosTransaction(_transaction) {
        throw new WalletException(new Error('This wallet does not support signAminoCosmosTransaction'), {
            code: UnspecifiedErrorCode,
            type: ErrorType.WalletError,
            contextModule: WalletAction.SignTransaction,
        });
    }
    async signArbitrary(_signer, _data) {
        throw new WalletException(new Error('This wallet does not support signArbitrary'), {
            code: UnspecifiedErrorCode,
            type: ErrorType.WalletError,
            contextModule: WalletAction.SignTransaction,
        });
    }
    async getEthereumChainId() {
        throw new CosmosWalletException(new Error('getEthereumChainId is not supported on Turnkey wallet'), {
            code: UnspecifiedErrorCode,
            context: WalletAction.GetChainId,
        });
    }
    async getEvmTransactionReceipt(txHash, ethereumChainId) {
        const options = this.ethereumOptions;
        const maxAttempts = 10;
        const interval = 3000;
        const chainId = ethereumChainId || options.ethereumChainId;
        const url = options.rpcUrl || options.rpcUrls?.[chainId];
        if (!url) {
            throw new WalletException(new Error('Please pass rpcUrl within the ethereumOptions'), {
                code: UnspecifiedErrorCode,
                context: WalletAction.GetEvmTransactionReceipt,
            });
        }
        const publicClient = createPublicClient({
            chain: {
                ...DEFAULT_EVM_CHAIN_CONFIG,
                id: chainId,
                rpcUrls: {
                    default: {
                        http: [url],
                    },
                },
            },
            transport: http(url),
        });
        let attempts = 0;
        while (attempts < maxAttempts) {
            attempts++;
            await sleep(interval);
            try {
                const receipt = await publicClient.getTransactionReceipt({
                    hash: txHash,
                });
                if (receipt) {
                    return receipt;
                }
            }
            catch { }
        }
        throw new Error(`Failed to retrieve transaction receipt for txHash: ${txHash}`);
    }
    // eslint-disable-next-line class-methods-use-this
    async getPubKey() {
        throw new WalletException(new Error('You can only fetch PubKey from Cosmos native wallets'));
    }
    async getIframeClient() {
        const turnkeyWallet = await this.getTurnkeyWallet();
        return turnkeyWallet.getIframeClient();
    }
    async getTurnkeyWallet() {
        const { metadata } = this;
        if (!this.turnkeyWallet) {
            if (!metadata?.turnkey) {
                throw new WalletException(new Error('Turnkey metadata is required'));
            }
            if (!metadata.turnkey.apiBaseUrl) {
                throw new WalletException(new Error('Turnkey apiBaseUrl is required'));
            }
            if (!metadata.turnkey.apiServerEndpoint) {
                throw new WalletException(new Error('Turnkey apiServerEndpoint is required'));
            }
            if (!metadata.turnkey.defaultOrganizationId) {
                throw new WalletException(new Error('Turnkey defaultOrganizationId is required'));
            }
            this.turnkeyWallet = new TurnkeyWallet(metadata.turnkey);
        }
        return this.turnkeyWallet;
    }
    async getOrganizationId() {
        const { metadata } = this;
        const organizationId = metadata?.turnkey?.organizationId ||
            metadata?.turnkey?.defaultOrganizationId;
        if (!organizationId) {
            throw new WalletException(new Error('Organization ID is required'));
        }
        return organizationId;
    }
}
