import { TurnkeyMetadata, TurnkeyProvider } from '@injectivelabs/wallet-base';
import { createAccount } from '@turnkey/viem';
import { HttpRestClient } from '@injectivelabs/utils';
import { Turnkey, TurnkeyIframeClient } from '@turnkey/sdk-browser';
export declare class TurnkeyWallet {
    private otpId?;
    protected turnkey?: Turnkey;
    organizationId: string;
    protected client: HttpRestClient;
    private metadata;
    protected iframeClient?: TurnkeyIframeClient;
    private accountMap;
    setMetadata(metadata: Partial<TurnkeyMetadata>): void;
    constructor(metadata: TurnkeyMetadata);
    static getTurnkeyInstance(metadata: TurnkeyMetadata): Promise<{
        turnkey: Turnkey;
        iframeClient: TurnkeyIframeClient;
    }>;
    getTurnkey(): Promise<Turnkey>;
    getIframeClient(): Promise<TurnkeyIframeClient>;
    getSession(existingCredentialBundle?: string): Promise<{
        session: import("@turnkey/sdk-types").Session | undefined;
        organizationId: string;
    }>;
    getAccounts(): Promise<string[]>;
    getOrCreateAndGetAccount(address: string, organizationId: string): Promise<ReturnType<typeof createAccount>>;
    injectAndRefresh(credentialBundle: string, options: {
        expirationSeconds?: string;
        organizationId?: string;
    }): Promise<void>;
    initOTP(email: string): Promise<import("../types.js").TurnkeyOTPCredentialsResponse>;
    confirmOTP(otpCode: string): Promise<import("../types.js").TurnkeyConfirmEmailOTPResponse>;
    initOAuth(provider: TurnkeyProvider.Google | TurnkeyProvider.Apple): Promise<string>;
    confirmOAuth(provider: TurnkeyProvider.Google | TurnkeyProvider.Apple, oidcToken: string): Promise<string>;
    refreshSession(): Promise<string>;
    private initFrame;
}
