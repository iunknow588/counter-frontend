import { ErrorType, WalletException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import { sha256 } from '@injectivelabs/sdk-ts';
import { DEFAULT_TURNKEY_REFRESH_SECONDS, TURNKEY_OAUTH_PATH, } from '../consts.js';
export class TurnkeyOauthWallet {
    static async generateOAuthNonce(iframeClient) {
        try {
            const targetPublicKey = iframeClient.iframePublicKey;
            if (!targetPublicKey) {
                throw new WalletException(new Error('Target public key not found'));
            }
            return Array.from(sha256(new TextEncoder().encode(targetPublicKey)))
                .map((b) => b.toString(16).padStart(2, '0'))
                .join('');
        }
        catch (e) {
            throw new WalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: 'turnkey-generate-oauth-nonce',
            });
        }
    }
    static async oauthLogin(args) {
        const { client, iframeClient, expirationSeconds } = args;
        const path = args.oauthLoginPath || TURNKEY_OAUTH_PATH;
        try {
            const targetPublicKey = iframeClient.iframePublicKey;
            if (!targetPublicKey) {
                throw new WalletException(new Error('Target public key not found'));
            }
            // client.$post is undefined, resorting to this for now
            const response = await client.post(path, {
                targetPublicKey,
                oidcToken: args.oidcToken,
                providerName: args.providerName,
                expirationSeconds: (expirationSeconds || DEFAULT_TURNKEY_REFRESH_SECONDS)?.toString(),
            });
            return response.data;
        }
        catch (e) {
            throw new WalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: 'turnkey-oauth-login',
            });
        }
    }
}
