import { TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { ChainId, CosmosChainId, AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { StdSignDoc, WalletDeviceType, BaseConcreteStrategy, ConcreteWalletStrategy } from '@injectivelabs/wallet-base';
import { CosmosTxV1Beta1Tx } from '@injectivelabs/sdk-ts';
export declare class Cosmostation extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    private cosmostationWallet?;
    chainName: string;
    constructor(args: {
        chainId: ChainId | CosmosChainId;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(address?: AccountAddress): Promise<string>;
    sendEvmTransaction(_transaction: unknown, _options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: DirectSignResponse | CosmosTxV1Beta1Tx.TxRaw, _options: {
        address: AccountAddress;
        chainId: ChainId;
    }): Promise<TxResponse>;
    signAminoCosmosTransaction(_transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(transaction: {
        txRaw: CosmosTxV1Beta1Tx.TxRaw;
        chainId: string;
        address: string;
        accountNumber: number;
    }): Promise<DirectSignResponse>;
    getPubKey(): Promise<string>;
    signEip712TypedData(_eip712TypedData: string, _address: AccountAddress): Promise<string>;
    signArbitrary(signer: string, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(_txHash: string): Promise<string>;
    private getCosmostationWallet;
}
