"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmostationWallet = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const extension_client_1 = require("@cosmostation/extension-client");
class CosmostationWallet {
    chainId;
    constructor(chainId) {
        this.chainId = chainId;
    }
    static async isChainIdSupported(chainId) {
        return new CosmostationWallet(chainId).checkChainIdSupport();
    }
    async checkChainIdSupport() {
        const { chainId: actualChainId } = this;
        const provider = await this.getCosmostationWallet();
        const chainName = actualChainId.split('-');
        try {
            const supportedChainIds = await provider.getSupportedChainIds();
            return !!supportedChainIds.official.find((chainId) => chainId === actualChainId);
        }
        catch (e) {
            throw new exceptions_1.CosmosWalletException(new Error(`Cosmostation doesn't support ${chainName[0] || actualChainId} network. Please use another Cosmos wallet`));
        }
    }
    async getCosmostationWallet() {
        try {
            const provider = await (0, extension_client_1.cosmos)();
            return provider;
        }
        catch (e) {
            if (e instanceof extension_client_1.InstallError) {
                throw new exceptions_1.CosmosWalletException(new Error('Please install the Cosmostation extension'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletNotInstalledError,
                });
            }
            throw new exceptions_1.CosmosWalletException(new Error(e.message), {
                code: exceptions_1.UnspecifiedErrorCode,
            });
        }
    }
}
exports.CosmostationWallet = CosmostationWallet;
