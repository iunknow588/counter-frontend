import { TxRaw, TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { ChainId, AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { Wallet, WalletDeviceType, type WalletMetadata, ConcreteStrategiesArg, SendTransactionOptions, ConcreteWalletStrategy, onAccountChangeCallback, onChainIdChangeCallback, WalletStrategyArguments, CosmosWalletAbstraction, WalletStrategy as WalletStrategyInterface } from '@injectivelabs/wallet-base';
import { StdSignDoc } from '@keplr-wallet/types';
import { WalletStrategyEmitter } from '../broadcaster/types.js';
export default class BaseWalletStrategy implements WalletStrategyInterface {
    strategies: ConcreteStrategiesArg;
    wallet: Wallet;
    args: WalletStrategyArguments;
    metadata?: WalletMetadata;
    wallets?: Wallet[];
    private emitter;
    on: WalletStrategyEmitter['on'];
    off: WalletStrategyEmitter['off'];
    emit: WalletStrategyEmitter['emit'];
    constructor(args: WalletStrategyArguments);
    getWallet(): Wallet;
    setWallet(wallet: Wallet): void;
    setMetadata(metadata?: WalletMetadata): void;
    getStrategy(): ConcreteWalletStrategy;
    getAddresses(args?: unknown): Promise<AccountAddress[]>;
    getWalletDeviceType(): Promise<WalletDeviceType>;
    getPubKey(address?: string): Promise<string>;
    enable(args?: unknown): Promise<boolean>;
    enableAndGetAddresses(args?: unknown): Promise<AccountAddress[]>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(txHash: string, ethereumChainId?: EthereumChainId): Promise<void>;
    getSessionOrConfirm(address?: AccountAddress): Promise<string>;
    getWalletClient<T>(): Promise<T>;
    sendTransaction(tx: DirectSignResponse | TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    sendEvmTransaction(tx: any, options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    signEip712TypedData(eip712TypedData: string, address: AccountAddress): Promise<string>;
    signAminoCosmosTransaction(transaction: {
        signDoc: StdSignDoc;
        address: string;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signArbitrary(signer: string, data: string | Uint8Array): Promise<string | void>;
    onAccountChange(callback: onAccountChangeCallback): Promise<void>;
    onChainIdChange(callback: onChainIdChangeCallback): Promise<void>;
    disconnect(): Promise<void>;
    getCosmosWallet(chainId: ChainId): CosmosWalletAbstraction;
}
