"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmostationWallet = void 0;
const extension_client_1 = require("@cosmostation/extension-client");
const exceptions_1 = require("@injectivelabs/exceptions");
class CosmostationWallet {
    constructor(chainId) {
        this.chainId = chainId;
    }
    static isChainIdSupported(chainId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new CosmostationWallet(chainId).checkChainIdSupport();
        });
    }
    checkChainIdSupport() {
        return __awaiter(this, void 0, void 0, function* () {
            const { chainId: actualChainId } = this;
            const provider = yield this.getCosmostationWallet();
            const chainName = actualChainId.split('-');
            try {
                const supportedChainIds = yield provider.getSupportedChainIds();
                return !!supportedChainIds.official.find((chainId) => chainId === actualChainId);
            }
            catch (e) {
                throw new exceptions_1.CosmosWalletException(new Error(`Cosmostation doesn't support ${chainName[0] || actualChainId} network. Please use another Cosmos wallet`));
            }
        });
    }
    getCosmostationWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const provider = yield (0, extension_client_1.cosmos)();
                return provider;
            }
            catch (e) {
                if (e instanceof extension_client_1.InstallError) {
                    throw new exceptions_1.CosmosWalletException(new Error('Please install the Cosmostation extension'), {
                        code: exceptions_1.UnspecifiedErrorCode,
                        type: exceptions_1.ErrorType.WalletNotInstalledError,
                    });
                }
                throw new exceptions_1.CosmosWalletException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
}
exports.CosmostationWallet = CosmostationWallet;
//# sourceMappingURL=CosmostationWallet.js.map