import { TxRaw } from '@injectivelabs/sdk-ts';
import { DirectSignResponse } from '@cosmjs/proto-signing';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import BaseConcreteStrategy from './Base.js';
import { MagicProvider, WalletDeviceType } from '../../../types/enums.js';
import { ConcreteWalletStrategy, WalletStrategyArguments } from '../../types/index.js';
import { MagicMetadata, BrowserEip1993Provider, SendTransactionOptions } from '../types.js';
interface MagicConnectArgs extends WalletStrategyArguments {
    metadata?: MagicMetadata;
}
export default class Magic extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    provider: BrowserEip1993Provider | undefined;
    metadata?: MagicMetadata;
    private magicWallet;
    constructor(args: MagicConnectArgs);
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable({ email, provider, }: {
        email?: string;
        provider?: MagicProvider;
    }): Promise<boolean>;
    connectViaEmail(email?: string): Promise<string | null>;
    connectViaOauth(provider: MagicProvider): Promise<any>;
    disconnect(): Promise<void>;
    getAddresses({ provider, }: {
        provider: MagicProvider;
    }): Promise<string[]>;
    getSessionOrConfirm(address: AccountAddress): Promise<string>;
    sendEthereumTransaction(_transaction: unknown, _options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<any>;
    /** @deprecated */
    signTransaction(_eip712json: string, _address: AccountAddress): Promise<string>;
    signEip712TypedData(eip712json: string, _address: AccountAddress): Promise<string>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signAminoCosmosTransaction(_transaction: {
        signDoc: any;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<string>;
    signArbitrary(_signer: AccountAddress, _data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEthereumTransactionReceipt(_txHash: string): Promise<string>;
    getPubKey(): Promise<string>;
    private pollUserLoggedInState;
}
export {};
//# sourceMappingURL=Magic.d.ts.map