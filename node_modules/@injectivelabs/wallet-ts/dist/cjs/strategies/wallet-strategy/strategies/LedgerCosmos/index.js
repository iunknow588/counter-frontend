"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const Base_js_1 = __importDefault(require("../Base.js"));
const constants_js_1 = require("../../constants.js");
const index_js_1 = __importDefault(require("./hw/index.js"));
const enums_js_1 = require("../../../../types/enums.js");
const exceptions_2 = require("@injectivelabs/exceptions");
class LedgerCosmos extends Base_js_1.default {
    constructor(args) {
        super(args);
        this.baseDerivationPath = constants_js_1.DEFAULT_BASE_DERIVATION_PATH;
        this.ledger = new index_js_1.default();
    }
    getWalletDeviceType() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(enums_js_1.WalletDeviceType.Hardware);
        });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(true);
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.ledger = yield this.ledger.refresh();
        });
    }
    getAddresses() {
        return __awaiter(this, void 0, void 0, function* () {
            const { baseDerivationPath } = this;
            try {
                const accountManager = yield this.ledger.getAccountManager();
                const wallets = yield accountManager.getWallets(baseDerivationPath);
                return wallets.map((k) => k.address);
            }
            catch (e) {
                throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
        });
    }
    getSessionOrConfirm(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(`0x${Buffer.from(`Confirmation for ${address} at time: ${Date.now()}`).toString('hex')}`);
        });
    }
    sendEthereumTransaction(_txData, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_2.CosmosWalletException(new Error('sendEthereumTransaction is not supported. LedgerCosmos only supports sending cosmos transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: enums_js_1.WalletAction.SendEthereumTransaction,
            });
        });
    }
    sendTransaction(transaction, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { endpoints, txTimeout } = options;
            if (!endpoints) {
                throw new exceptions_1.WalletException(new Error('You have to pass endpoints.grpc within the options for using LedgerCosmos wallet'));
            }
            const txApi = new sdk_ts_1.TxGrpcApi(endpoints.grpc);
            const response = yield txApi.broadcast(transaction, { txTimeout });
            if (response.code !== 0) {
                throw new exceptions_1.TransactionException(new Error(response.rawLog), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextCode: response.code,
                    contextModule: response.codespace,
                });
            }
            return response;
        });
    }
    /** @deprecated */
    signTransaction(transaction, injectiveAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.signCosmosTransaction(Object.assign(Object.assign({}, transaction), { address: injectiveAddress }));
        });
    }
    signAminoCosmosTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { derivationPath } = yield this.getWalletForAddress(transaction.address);
                const ledger = yield this.ledger.getInstance();
                const result = yield ledger.sign(derivationPath, JSON.stringify((0, sdk_ts_1.sortObjectByKeys)(transaction.signDoc)));
                return Buffer.from(result.signature).toString('base64');
            }
            catch (e) {
                throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignTransaction,
                });
            }
        });
    }
    signCosmosTransaction(_transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_2.CosmosWalletException(new Error('This wallet does not support signing using direct sign'), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: enums_js_1.WalletAction.SendTransaction,
            });
        });
    }
    signEip712TypedData(_eip712Json, _address) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_2.CosmosWalletException(new Error('This wallet does not support signing Ethereum transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: enums_js_1.WalletAction.SendTransaction,
            });
        });
    }
    signArbitrary(signer, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { derivationPath } = yield this.getWalletForAddress(signer);
                const ledger = yield this.ledger.getInstance();
                const result = yield ledger.sign(derivationPath, (0, sdk_ts_1.toUtf8)(data));
                return Buffer.from(result.signature).toString('base64');
            }
            catch (e) {
                throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignTransaction,
                });
            }
        });
    }
    getEthereumChainId() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_2.CosmosWalletException(new Error('getEthereumChainId is not supported on Keplr'), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: enums_js_1.WalletAction.GetChainId,
            });
        });
    }
    getEthereumTransactionReceipt(_txHash) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_2.CosmosWalletException(new Error('getEthereumTransactionReceipt is not supported on Keplr'), {
                code: exceptions_1.UnspecifiedErrorCode,
                context: enums_js_1.WalletAction.GetEthereumTransactionReceipt,
            });
        });
    }
    getPubKey(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!address) {
                throw new exceptions_1.WalletException(new Error('You can only fetch PubKey corresponding to an address'));
            }
            const ledgerWalletInfo = yield this.getWalletForAddress(address);
            return Buffer.from(ledgerWalletInfo.publicKey || '', 'hex').toString('base64');
        });
    }
    getWalletForAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { baseDerivationPath } = this;
                const accountManager = yield this.ledger.getAccountManager();
                if (!accountManager.hasWalletForAddress(address)) {
                    for (let i = 0; i < constants_js_1.DEFAULT_ADDRESS_SEARCH_LIMIT / constants_js_1.DEFAULT_NUM_ADDRESSES_TO_FETCH; i += 1) {
                        yield accountManager.getWallets(baseDerivationPath);
                        if (accountManager.hasWalletForAddress(address)) {
                            return (yield accountManager.getWalletForAddress(address));
                        }
                    }
                }
                return (yield accountManager.getWalletForAddress(address));
            }
            catch (e) {
                throw new exceptions_1.LedgerCosmosException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
        });
    }
}
exports.default = LedgerCosmos;
//# sourceMappingURL=index.js.map