"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this */
const ts_types_1 = require("@injectivelabs/ts-types");
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const Base_js_1 = __importDefault(require("./Base.js"));
const enums_js_1 = require("../../../types/enums.js");
const ethereum_provider_1 = require("@walletconnect/ethereum-provider");
const WalletConnectIds = {
    FireBlocks: '5864e2ced7c293ed18ac35e0db085c09ed567d67346ccb6f58a0327a75137489',
};
class WalletConnect extends Base_js_1.default {
    constructor(args) {
        super(args);
        this.metadata = args.metadata;
    }
    getWalletDeviceType() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(enums_js_1.WalletDeviceType.Browser);
        });
    }
    enable(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connectWalletConnect(args === null || args === void 0 ? void 0 : args.topic);
            return Promise.resolve(true);
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.listeners[enums_js_1.WalletEventListener.AccountChange]) {
                const wc = yield this.getConnectedWalletConnect();
                wc.removeListener('accountsChanged', this.listeners[enums_js_1.WalletEventListener.AccountChange]);
            }
            if (this.listeners[enums_js_1.WalletEventListener.ChainIdChange]) {
                const wc = yield this.getConnectedWalletConnect();
                wc.removeListener('chainChanged', this.listeners[enums_js_1.WalletEventListener.ChainIdChange]);
            }
            this.listeners = {};
            if (this.provider) {
                yield this.provider.disconnect();
                this.provider = undefined;
            }
        });
    }
    getAddresses() {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            try {
                return yield wc.request({
                    method: 'eth_requestAccounts',
                });
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
        });
    }
    getSessionOrConfirm(_address) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const wc = yield this.getConnectedWalletConnect();
            return ((_a = wc.session) === null || _a === void 0 ? void 0 : _a.topic) || '';
        });
    }
    sendEthereumTransaction(transaction, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            try {
                return yield wc.request({
                    method: 'eth_sendTransaction',
                    params: [transaction],
                });
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SendEthereumTransaction,
                });
            }
        });
    }
    sendTransaction(transaction, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { endpoints, txTimeout } = options;
            if (!endpoints) {
                throw new exceptions_1.WalletException(new Error('You have to pass endpoints within the options for using Ethereum native wallets'));
            }
            const txApi = new sdk_ts_1.TxGrpcApi(endpoints.grpc);
            const response = yield txApi.broadcast(transaction, { txTimeout });
            if (response.code !== 0) {
                throw new exceptions_1.TransactionException(new Error(response.rawLog), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextCode: response.code,
                    contextModule: response.codespace,
                });
            }
            return response;
        });
    }
    /** @deprecated */
    signTransaction(eip712json, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.signEip712TypedData(eip712json, address);
        });
    }
    signEip712TypedData(eip712json, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            try {
                return yield wc.request({
                    method: 'eth_signTypedData_v4',
                    params: [address, eip712json],
                });
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignTransaction,
                });
            }
        });
    }
    signAminoCosmosTransaction(_transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.SignTransaction,
            });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    signCosmosTransaction(_transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.SignTransaction,
            });
        });
    }
    signArbitrary(signer, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            try {
                const signature = yield wc.request({
                    method: 'personal_sign',
                    params: [(0, sdk_ts_1.toUtf8)(data), signer],
                });
                return signature;
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignArbitrary,
                });
            }
        });
    }
    getEthereumChainId() {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            try {
                return wc.request({ method: 'eth_chainId' });
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetChainId,
                });
            }
        });
    }
    getEthereumTransactionReceipt(_txHash) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support awaiting Ethereum transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.GetEthereumTransactionReceipt,
            });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    getPubKey() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('You can only fetch PubKey from Cosmos native wallets'));
        });
    }
    onChainIdChanged(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            this.listeners = {
                [enums_js_1.WalletEventListener.ChainIdChange]: callback,
            };
            wc.on('chainChanged', callback);
        });
    }
    onAccountChange(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const wc = yield this.getConnectedWalletConnect();
            this.listeners = {
                [enums_js_1.WalletEventListener.AccountChange]: callback,
            };
            wc.on('accountsChanged', (accounts) => callback(accounts[0]));
        });
    }
    getWalletConnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.provider) {
                return this.provider;
            }
            if (!this.metadata) {
                throw new exceptions_1.WalletException(new Error('Please provide metadata for WalletConnect'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
            if (!this.metadata.projectId) {
                throw new exceptions_1.WalletException(new Error('Please provide projectId alongside the metadata for WalletConnect'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
            try {
                this.provider = yield ethereum_provider_1.EthereumProvider.init({
                    projectId: this.metadata.projectId,
                    metadata: this.metadata
                        .metadata,
                    showQrModal: true,
                    optionalChains: this.ethereumChainId
                        ? [this.ethereumChainId]
                        : [ts_types_1.EthereumChainId.Mainnet, ts_types_1.EthereumChainId.Sepolia],
                    qrModalOptions: {
                        explorerRecommendedWalletIds: [WalletConnectIds.FireBlocks],
                        explorerExcludedWalletIds: 'ALL',
                        mobileWallets: [],
                        walletImages: {
                            [WalletConnectIds.FireBlocks]: '/wallet-connect/fireblocks.webp',
                        },
                        desktopWallets: [
                            {
                                id: WalletConnectIds.FireBlocks,
                                name: 'Fireblocks',
                                links: {
                                    native: 'fireblocks-wc://',
                                    universal: 'https://console.fireblocks.io/v2/',
                                },
                            },
                        ],
                    },
                });
                return this.provider;
            }
            catch (e) {
                throw new exceptions_1.WalletException(new Error('WalletConnect not supported for this wallet'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
        });
    }
    getConnectedWalletConnect() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.provider) {
                yield this.getWalletConnect();
            }
            if (!((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connected)) {
                yield this.enable();
            }
            return this.provider;
        });
    }
    connectWalletConnect(topic) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.provider && this.provider.connected) {
                return;
            }
            const wc = yield this.getWalletConnect();
            yield wc.connect(Object.assign({}, (topic && { pairingTopic: topic })));
        });
    }
}
exports.default = WalletConnect;
//# sourceMappingURL=WalletConnect.js.map