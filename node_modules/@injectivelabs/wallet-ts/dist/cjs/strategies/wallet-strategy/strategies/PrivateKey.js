"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this */
const ts_types_1 = require("@injectivelabs/ts-types");
const exceptions_1 = require("@injectivelabs/exceptions");
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const sdk_ts_2 = require("@injectivelabs/sdk-ts");
const Base_js_1 = __importDefault(require("./Base.js"));
const enums_js_1 = require("../../../types/enums.js");
class PrivateKey extends Base_js_1.default {
    constructor(args) {
        super(args);
        this.privateKey = args.privateKey
            ? sdk_ts_1.PrivateKey.fromHex(args.privateKey)
            : undefined;
    }
    getWalletDeviceType() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(enums_js_1.WalletDeviceType.Other);
        });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(true);
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.listeners = {};
        });
    }
    getAddresses() {
        return __awaiter(this, void 0, void 0, function* () {
            const pk = this.getPrivateKey();
            try {
                return Promise.resolve([pk.toAddress().toHex()]);
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetAccounts,
                });
            }
        });
    }
    // eslint-disable-next-line class-methods-use-this
    getSessionOrConfirm(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(`0x${Buffer.from(`Confirmation for ${address} at time: ${Date.now()}`).toString('hex')}`);
        });
    }
    sendEthereumTransaction(_transaction, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support sending Ethereum transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.SendEthereumTransaction,
            });
        });
    }
    sendTransaction(transaction, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { endpoints, txTimeout } = options;
            if (!endpoints) {
                throw new exceptions_1.WalletException(new Error('You have to pass endpoints within the options for using Ethereum native wallets'));
            }
            const txApi = new sdk_ts_2.TxGrpcApi(endpoints.grpc);
            const response = yield txApi.broadcast(transaction, { txTimeout });
            if (response.code !== 0) {
                throw new exceptions_1.TransactionException(new Error(response.rawLog), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextCode: response.code,
                    contextModule: response.codespace,
                });
            }
            return response;
        });
    }
    /** @deprecated */
    signTransaction(eip712json, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.signEip712TypedData(eip712json, address);
        });
    }
    signEip712TypedData(eip712json, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const pk = this.getPrivateKey();
            if ((0, sdk_ts_1.getInjectiveSignerAddress)(address) !== pk.toAddress().toBech32()) {
                throw new exceptions_1.WalletException(new Error('Signer address does not match the private key address'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignTransaction,
                });
            }
            try {
                const signature = yield pk.signTypedData(JSON.parse(eip712json));
                return `0x${Buffer.from(signature).toString('hex')}`;
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignTransaction,
                });
            }
        });
    }
    signAminoCosmosTransaction(_transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.SignTransaction,
            });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    signCosmosTransaction(_transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletError,
                contextModule: enums_js_1.WalletAction.SignTransaction,
            });
        });
    }
    signArbitrary(signer, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const pk = this.getPrivateKey();
            if ((0, sdk_ts_1.getInjectiveSignerAddress)(signer) !== pk.toAddress().toBech32()) {
                throw new exceptions_1.WalletException(new Error('Signer address does not match the private key address'), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignArbitrary,
                });
            }
            try {
                const signature = yield pk.signHashed(Buffer.from((0, sdk_ts_2.toUtf8)(data), 'utf-8'));
                return `0x${Buffer.from(signature).toString('base64')}`;
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.SignArbitrary,
                });
            }
        });
    }
    getEthereumChainId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return Promise.resolve((this.chainId === ts_types_1.ChainId.Mainnet
                    ? ts_types_1.EthereumChainId.Mainnet
                    : ts_types_1.EthereumChainId.Sepolia).toString(16));
            }
            catch (e) {
                throw new exceptions_1.MetamaskException(new Error(e.message), {
                    code: exceptions_1.UnspecifiedErrorCode,
                    type: exceptions_1.ErrorType.WalletError,
                    contextModule: enums_js_1.WalletAction.GetChainId,
                });
            }
        });
    }
    getEthereumTransactionReceipt(_txHash) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new exceptions_1.WalletException(new Error('Not supported'));
        });
    }
    // eslint-disable-next-line class-methods-use-this
    getPubKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const pk = this.getPrivateKey();
            return pk.toPublicKey().toBase64();
        });
    }
    onChainIdChanged(_callback) {
        return __awaiter(this, void 0, void 0, function* () {
            //
        });
    }
    onAccountChange(_callback) {
        return __awaiter(this, void 0, void 0, function* () {
            //
        });
    }
    getPrivateKey() {
        if (!this.privateKey) {
            throw new exceptions_1.WalletException(new Error('Please provide private key in the constructor'), {
                code: exceptions_1.UnspecifiedErrorCode,
                type: exceptions_1.ErrorType.WalletNotInstalledError,
                contextModule: enums_js_1.WalletAction.GetAccounts,
            });
        }
        return this.privateKey;
    }
}
exports.default = PrivateKey;
//# sourceMappingURL=PrivateKey.js.map