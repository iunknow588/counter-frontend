import { CosmosChainId } from '@injectivelabs/ts-types';
import { TxRaw, TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { StdSignDoc } from '@keplr-wallet/types';
import { WalletDeviceType } from '../../../types/enums.js';
import { ConcreteCosmosWalletStrategy } from '../../types/strategy.js';
import { SendTransactionOptions } from '../../wallet-strategy/index.js';
export default class Ninji implements ConcreteCosmosWalletStrategy {
    chainId: CosmosChainId;
    private ninjiWallet;
    constructor(args: {
        chainId: CosmosChainId;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    getAddresses(): Promise<string[]>;
    sendTransaction(transaction: DirectSignResponse | TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    signTransaction(transaction: {
        txRaw: TxRaw;
        chainId: string;
        accountNumber: number;
        address: string;
    }): Promise<import("@cosmjs/proto-signing").DirectSignResponse>;
    signAminoTransaction(_transaction: {
        address: string;
        stdSignDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    getPubKey(): Promise<string>;
    private getNinjiWallet;
}
//# sourceMappingURL=Ninji.d.ts.map