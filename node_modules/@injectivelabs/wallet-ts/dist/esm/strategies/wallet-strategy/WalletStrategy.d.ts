import { TxRaw, TxResponse } from '@injectivelabs/sdk-ts';
import { DirectSignResponse } from '@cosmjs/proto-signing';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { Wallet, WalletDeviceType } from '../../types/enums.js';
import { SendTransactionOptions } from './types.js';
import { WalletStrategyOptions, ConcreteWalletStrategy, onAccountChangeCallback, onChainIdChangeCallback, WalletStrategyArguments } from '../types/index.js';
export default class WalletStrategy {
    strategies: Record<Wallet, ConcreteWalletStrategy | undefined>;
    wallet: Wallet;
    args: WalletStrategyArguments;
    constructor(args: WalletStrategyArguments);
    getWallet(): Wallet;
    setWallet(wallet: Wallet): void;
    /**
     * Case 1: Private Key is set dynamically
     * If we have a dynamically set private key,
     * we are creating a new PrivateKey strategy
     * with the specified private key
     *
     * Case 2: Wallet Connect Metadata set dynamically
     */
    setOptions(options?: WalletStrategyOptions): void;
    getStrategy(): ConcreteWalletStrategy;
    getAddresses(args?: unknown): Promise<AccountAddress[]>;
    getWalletDeviceType(): Promise<WalletDeviceType>;
    getPubKey(address?: string): Promise<string>;
    enable(args?: unknown): Promise<boolean>;
    enableAndGetAddresses(args?: unknown): Promise<AccountAddress[]>;
    getEthereumChainId(): Promise<string>;
    getEthereumTransactionReceipt(txHash: string): Promise<void>;
    getSessionOrConfirm(address?: AccountAddress): Promise<string>;
    sendTransaction(tx: DirectSignResponse | TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    sendEthereumTransaction(tx: any, options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    /** @deprecated * */
    signTransaction(data: string | {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
    }, address: AccountAddress): Promise<string | DirectSignResponse>;
    signEip712TypedData(eip712TypedData: string, address: AccountAddress): Promise<string>;
    signAminoCosmosTransaction(transaction: {
        signDoc: any;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<string>;
    signCosmosTransaction(transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signArbitrary(signer: string, data: string | Uint8Array): Promise<string | void>;
    onAccountChange(callback: onAccountChangeCallback): Promise<void>;
    onChainIdChange(callback: onChainIdChangeCallback): Promise<void>;
    disconnect(): Promise<void>;
}
//# sourceMappingURL=WalletStrategy.d.ts.map