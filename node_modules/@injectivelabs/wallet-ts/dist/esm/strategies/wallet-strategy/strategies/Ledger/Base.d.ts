import { DirectSignResponse } from '@cosmjs/proto-signing';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
import { TxRaw, TxResponse } from '@injectivelabs/sdk-ts';
import { SendTransactionOptions, LedgerDerivationPathType } from '../../types.js';
import { ConcreteWalletStrategy, EthereumWalletStrategyArgs } from '../../../types/index.js';
import BaseConcreteStrategy from '../Base.js';
import { WalletDeviceType } from '../../../../types/enums.js';
export default class LedgerBase extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    private baseDerivationPath;
    private derivationPathType;
    private ledger;
    private ethereumOptions;
    private alchemy;
    constructor(args: EthereumWalletStrategyArgs & {
        derivationPathType: LedgerDerivationPathType;
    });
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(address: AccountAddress): Promise<string>;
    sendEthereumTransaction(txData: any, options: {
        address: string;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    /** @deprecated */
    signTransaction(eip712json: string, address: AccountAddress): Promise<string>;
    signEip712TypedData(eip712json: string, address: AccountAddress): Promise<string>;
    signAminoCosmosTransaction(_transaction: {
        signDoc: any;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<string>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signArbitrary(signer: AccountAddress, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEthereumTransactionReceipt(txHash: string): Promise<string>;
    getPubKey(): Promise<string>;
    private signEthereumTransaction;
    private getWalletForAddress;
    private getAlchemy;
}
//# sourceMappingURL=Base.d.ts.map