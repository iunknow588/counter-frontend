import { ethers } from 'ethers';
import { WalletException } from '@injectivelabs/exceptions';
import { getBitGetProvider } from '../../../strategies/wallet-strategy/strategies/BitGet/utils.js';
export const getEthersProviderFromBitGet = async () => {
    try {
        const provider = (await getBitGetProvider());
        if (!provider) {
            throw new WalletException(new Error('Please install BitGet Extension'));
        }
        return new ethers.BrowserProvider(provider, 'any');
    }
    catch (e) {
        throw new WalletException(new Error('Please install BitGet Extension'));
    }
};
export const updateBitGetNetwork = async (chainId) => {
    try {
        const provider = (await getBitGetProvider());
        if (!provider) {
            throw new WalletException(new Error('Please install BitGet Extension'));
        }
        const chainIdToHex = chainId.toString(16);
        return await Promise.race([
            provider.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: `0x${chainIdToHex}` }],
            }),
            new Promise((resolve) => provider.on('change', ({ chain }) => {
                if (chain?.id === chainIdToHex) {
                    resolve();
                }
            })),
        ]);
    }
    catch (e) {
        throw new WalletException(new Error('Please update your BitGet network'));
    }
};
//# sourceMappingURL=BitGet.js.map