import { TxRaw, TxResponse, AminoSignResponse, DirectSignResponse } from '@injectivelabs/sdk-ts';
import { ErrorContext, ThrownException } from '@injectivelabs/exceptions';
import { Wallet, StdSignDoc, WalletDeviceType, BaseConcreteStrategy, SendTransactionOptions, BrowserEip1993Provider, ConcreteWalletStrategy, ConcreteWalletStrategyArgs, ConcreteEthereumWalletStrategyArgs } from '@injectivelabs/wallet-base';
import { AccountAddress, EthereumChainId } from '@injectivelabs/ts-types';
export declare class EvmWallet extends BaseConcreteStrategy implements ConcreteWalletStrategy {
    wallet?: Wallet;
    evmProviders: Partial<Record<Wallet, BrowserEip1993Provider>>;
    constructor(args: (ConcreteWalletStrategyArgs | ConcreteEthereumWalletStrategyArgs) & {
        wallet: Wallet;
    });
    EvmWalletException(error: Error, context?: ErrorContext): ThrownException;
    getWalletDeviceType(): Promise<WalletDeviceType>;
    enable(): Promise<boolean>;
    disconnect(): Promise<void>;
    getAddresses(): Promise<string[]>;
    getSessionOrConfirm(address: AccountAddress): Promise<string>;
    sendEvmTransaction(transaction: unknown, _options: {
        address: AccountAddress;
        ethereumChainId: EthereumChainId;
    }): Promise<string>;
    sendTransaction(transaction: TxRaw, options: SendTransactionOptions): Promise<TxResponse>;
    signEip712TypedData(eip712json: string, address: AccountAddress): Promise<string>;
    signAminoCosmosTransaction(_transaction: {
        address: string;
        signDoc: StdSignDoc;
    }): Promise<AminoSignResponse>;
    signCosmosTransaction(_transaction: {
        txRaw: TxRaw;
        accountNumber: number;
        chainId: string;
        address: string;
    }): Promise<DirectSignResponse>;
    signArbitrary(signer: AccountAddress, data: string | Uint8Array): Promise<string>;
    getEthereumChainId(): Promise<string>;
    getEvmTransactionReceipt(txHash: string): Promise<string>;
    getPubKey(): Promise<string>;
    onChainIdChanged(callback: (chain: string) => void): Promise<void>;
    onAccountChange(callback: (account: AccountAddress | string[]) => void): Promise<void>;
    private getEthereum;
}
