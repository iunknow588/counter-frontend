/* eslint-disable class-methods-use-this */
import { isEvmBrowserWallet } from '@injectivelabs/wallet-base';
import { toUtf8, TxGrpcApi, isServerSide, } from '@injectivelabs/sdk-ts';
import { ErrorType, WalletException, BitGetException, MetamaskException, OkxWalletException, UnspecifiedErrorCode, TransactionException, TrustWalletException, RainbowWalletException, } from '@injectivelabs/exceptions';
import { Wallet, WalletAction, WalletDeviceType, WalletEventListener, BaseConcreteStrategy, } from '@injectivelabs/wallet-base';
import { sleep, capitalize } from '@injectivelabs/utils';
import { getBitGetProvider, getPhantomProvider, getRainbowProvider, getMetamaskProvider, getOkxWalletProvider, getTrustWalletProvider, } from './utils/index.js';
export class EvmWallet extends BaseConcreteStrategy {
    wallet;
    evmProviders = {};
    constructor(args) {
        super(args);
        if (!isEvmBrowserWallet(args.wallet)) {
            throw new WalletException(new Error(`Evm Wallet for ${capitalize(args.wallet)} is not supported.`));
        }
        if (!isServerSide()) {
            window.addEventListener('eip6963:announceProvider', (announcement) => {
                const event = announcement;
                const walletName = event.detail.info.name.toLowerCase();
                if (walletName === Wallet.Metamask.toLowerCase()) {
                    this.evmProviders[Wallet.Metamask] = event.detail.provider;
                }
                if (walletName === Wallet.Rainbow.toLowerCase()) {
                    this.evmProviders[Wallet.Rainbow] = event.detail.provider;
                }
                if (walletName === Wallet.Phantom.toLowerCase()) {
                    this.evmProviders[Wallet.Phantom] = event.detail.provider;
                }
                if (walletName === Wallet.OkxWallet.toLowerCase()) {
                    this.evmProviders[Wallet.OkxWallet] = event.detail.provider;
                }
                if (walletName === Wallet.BitGet.toLowerCase()) {
                    this.evmProviders[Wallet.BitGet] = event.detail.provider;
                }
                if (walletName === Wallet.TrustWallet.toLowerCase()) {
                    this.evmProviders[Wallet.TrustWallet] = event.detail.provider;
                }
            });
            window.dispatchEvent(new Event('eip6963:requestProvider'));
        }
        this.wallet = args.wallet;
    }
    EvmWalletException(error, context) {
        if (this.wallet === Wallet.Metamask) {
            return new MetamaskException(error, context);
        }
        if (this.wallet === Wallet.BitGet) {
            return new BitGetException(error, context);
        }
        if (this.wallet === Wallet.OkxWallet) {
            return new OkxWalletException(error, context);
        }
        if (this.wallet === Wallet.Phantom) {
            return new MetamaskException(error, context);
        }
        if (this.wallet === Wallet.TrustWallet) {
            return new TrustWalletException(error, context);
        }
        if (this.wallet === Wallet.Rainbow) {
            return new RainbowWalletException(error, context);
        }
        return new WalletException(error, context);
    }
    async getWalletDeviceType() {
        return Promise.resolve(WalletDeviceType.Browser);
    }
    async enable() {
        return Promise.resolve(true);
    }
    async disconnect() {
        if (this.listeners[WalletEventListener.AccountChange]) {
            const ethereum = await this.getEthereum();
            ethereum.removeListener('accountsChanged', this.listeners[WalletEventListener.AccountChange]);
        }
        if (this.listeners[WalletEventListener.ChainIdChange]) {
            const ethereum = await this.getEthereum();
            ethereum.removeListener('chainChanged', this.listeners[WalletEventListener.ChainIdChange]);
        }
        this.listeners = {};
    }
    async getAddresses() {
        const ethereum = await this.getEthereum();
        try {
            return (await ethereum.request({
                method: 'eth_requestAccounts',
            }));
        }
        catch (e) {
            throw this.EvmWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.GetAccounts,
            });
        }
    }
    // eslint-disable-next-line class-methods-use-this
    async getSessionOrConfirm(address) {
        return Promise.resolve(`0x${Buffer.from(`Confirmation for ${address} at time: ${Date.now()}`).toString('hex')}`);
    }
    async sendEvmTransaction(transaction, _options) {
        const ethereum = await this.getEthereum();
        try {
            return (await ethereum.request({
                method: 'eth_sendTransaction',
                params: [transaction],
            }));
        }
        catch (e) {
            throw this.EvmWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.SendEvmTransaction,
            });
        }
    }
    async sendTransaction(transaction, options) {
        const { endpoints, txTimeout } = options;
        if (!endpoints) {
            throw new WalletException(new Error('You have to pass endpoints within the options for using Ethereum native wallets'));
        }
        const txApi = new TxGrpcApi(endpoints.grpc);
        const response = await txApi.broadcast(transaction, { txTimeout });
        if (response.code !== 0) {
            throw new TransactionException(new Error(response.rawLog), {
                code: UnspecifiedErrorCode,
                contextCode: response.code,
                contextModule: response.codespace,
            });
        }
        return response;
    }
    async signEip712TypedData(eip712json, address) {
        const ethereum = await this.getEthereum();
        try {
            return (await ethereum.request({
                method: 'eth_signTypedData_v4',
                params: [address, eip712json],
            }));
        }
        catch (e) {
            if (e.message.includes('Ledger: The signature doesnt match the right address')) {
                throw new MetamaskException(new Error('Please connect directly with Ledger to sign this transaction'), {
                    code: UnspecifiedErrorCode,
                    type: ErrorType.WalletError,
                    contextModule: WalletAction.SignTransaction,
                });
            }
            throw new MetamaskException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.SignTransaction,
            });
        }
    }
    async signAminoCosmosTransaction(_transaction) {
        throw new WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
            code: UnspecifiedErrorCode,
            type: ErrorType.WalletError,
            contextModule: WalletAction.SignTransaction,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    async signCosmosTransaction(_transaction) {
        throw new WalletException(new Error('This wallet does not support signing Cosmos transactions'), {
            code: UnspecifiedErrorCode,
            type: ErrorType.WalletError,
            contextModule: WalletAction.SignTransaction,
        });
    }
    async signArbitrary(signer, data) {
        const ethereum = await this.getEthereum();
        try {
            const signature = await ethereum.request({
                method: 'personal_sign',
                params: [toUtf8(data), signer],
            });
            return signature;
        }
        catch (e) {
            throw this.EvmWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.SignArbitrary,
            });
        }
    }
    async getEthereumChainId() {
        const ethereum = await this.getEthereum();
        try {
            return ethereum.request({ method: 'eth_chainId' });
        }
        catch (e) {
            throw this.EvmWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.GetChainId,
            });
        }
    }
    async getEvmTransactionReceipt(txHash) {
        const ethereum = await this.getEthereum();
        const interval = 1000;
        const transactionReceiptRetry = async () => {
            const receipt = (await ethereum.request({
                method: 'eth_getTransactionReceipt',
                params: [txHash],
            }));
            if (!receipt) {
                await sleep(interval);
                await transactionReceiptRetry();
            }
            return receipt;
        };
        try {
            return await transactionReceiptRetry();
        }
        catch (e) {
            throw this.EvmWalletException(new Error(e.message), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletError,
                contextModule: WalletAction.GetEvmTransactionReceipt,
            });
        }
    }
    // eslint-disable-next-line class-methods-use-this
    async getPubKey() {
        throw new WalletException(new Error('You can only fetch PubKey from Cosmos native wallets'));
    }
    async onChainIdChanged(callback) {
        const ethereum = await this.getEthereum();
        this.listeners = {
            [WalletEventListener.ChainIdChange]: callback,
        };
        ethereum.on('chainChanged', callback);
    }
    async onAccountChange(callback) {
        const ethereum = await this.getEthereum();
        this.listeners = {
            [WalletEventListener.AccountChange]: callback,
        };
        ethereum.on('accountsChanged', callback);
    }
    async getEthereum() {
        const evmProvider = this.evmProviders[this.wallet];
        if (evmProvider) {
            return evmProvider;
        }
        const backUpProvider = this.wallet === Wallet.Metamask
            ? await getMetamaskProvider()
            : this.wallet === Wallet.Phantom
                ? await getPhantomProvider()
                : this.wallet === Wallet.BitGet
                    ? await getBitGetProvider()
                    : this.wallet === Wallet.OkxWallet
                        ? await getOkxWalletProvider()
                        : this.wallet === Wallet.TrustWallet
                            ? await getTrustWalletProvider()
                            : this.wallet === Wallet.Rainbow
                                ? await getRainbowProvider()
                                : undefined;
        if (!backUpProvider) {
            throw this.EvmWalletException(new Error(`Please install the ${this.wallet} wallet extension.`), {
                code: UnspecifiedErrorCode,
                type: ErrorType.WalletNotInstalledError,
                contextModule: WalletAction.GetAccounts,
            });
        }
        return backUpProvider;
    }
}
