"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOkxWalletProvider = getOkxWalletProvider;
const sdk_ts_1 = require("@injectivelabs/sdk-ts");
const $window = ((0, sdk_ts_1.isServerSide)()
    ? {}
    : window);
async function getOkxWalletProvider({ timeout } = { timeout: 3000 }) {
    const provider = getOkxWalletFromWindow();
    if (provider) {
        return provider;
    }
    return listenForOkxWalletInitialized({
        timeout,
    });
}
async function listenForOkxWalletInitialized({ timeout } = { timeout: 3000 }) {
    return new Promise((resolve) => {
        const handleInitialization = () => {
            resolve(getOkxWalletFromWindow());
        };
        $window.addEventListener('okxwallet#initialized', handleInitialization, {
            once: true,
        });
        setTimeout(() => {
            $window.removeEventListener('okxwallet#initialized', handleInitialization);
            resolve(null);
        }, timeout);
    });
}
function getOkxWalletFromWindow() {
    const injectedProviderExist = typeof window !== 'undefined' &&
        (typeof $window.ethereum !== 'undefined' ||
            typeof $window.okxwallet !== 'undefined');
    // No injected providers exist.
    if (!injectedProviderExist) {
        return;
    }
    if ($window.okxwallet) {
        return $window.okxwallet;
    }
    if ($window.ethereum.isOkxWallet) {
        return $window.ethereum;
    }
    if ($window.providers) {
        return $window.providers.find((p) => p.isOkxWallet);
    }
    return;
}
