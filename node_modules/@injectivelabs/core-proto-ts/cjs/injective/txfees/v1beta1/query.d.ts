import { grpc } from "@injectivelabs/grpc-web";
import _m0 from "protobufjs/minimal.js";
import { Params } from "./txfees";
export declare const protobufPackage = "injective.txfees.v1beta1";
export interface EipBaseFee {
    baseFee: string;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params: Params | undefined;
}
export interface QueryEipBaseFeeRequest {
}
export interface QueryEipBaseFeeResponse {
    baseFee: EipBaseFee | undefined;
}
export declare const EipBaseFee: {
    encode(message: EipBaseFee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EipBaseFee;
    fromJSON(object: any): EipBaseFee;
    toJSON(message: EipBaseFee): unknown;
    create(base?: DeepPartial<EipBaseFee>): EipBaseFee;
    fromPartial(object: DeepPartial<EipBaseFee>): EipBaseFee;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
export declare const QueryEipBaseFeeRequest: {
    encode(_: QueryEipBaseFeeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEipBaseFeeRequest;
    fromJSON(_: any): QueryEipBaseFeeRequest;
    toJSON(_: QueryEipBaseFeeRequest): unknown;
    create(base?: DeepPartial<QueryEipBaseFeeRequest>): QueryEipBaseFeeRequest;
    fromPartial(_: DeepPartial<QueryEipBaseFeeRequest>): QueryEipBaseFeeRequest;
};
export declare const QueryEipBaseFeeResponse: {
    encode(message: QueryEipBaseFeeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryEipBaseFeeResponse;
    fromJSON(object: any): QueryEipBaseFeeResponse;
    toJSON(message: QueryEipBaseFeeResponse): unknown;
    create(base?: DeepPartial<QueryEipBaseFeeResponse>): QueryEipBaseFeeResponse;
    fromPartial(object: DeepPartial<QueryEipBaseFeeResponse>): QueryEipBaseFeeResponse;
};
export interface Query {
    /**
     * Params defines a gRPC query method that returns the tokenfactory module's
     * parameters.
     */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    /** Returns the current fee market EIP fee. */
    GetEipBaseFee(request: DeepPartial<QueryEipBaseFeeRequest>, metadata?: grpc.Metadata): Promise<QueryEipBaseFeeResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    GetEipBaseFee(request: DeepPartial<QueryEipBaseFeeRequest>, metadata?: grpc.Metadata): Promise<QueryEipBaseFeeResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
export declare const QueryGetEipBaseFeeDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare var tsProtoGlobalThis: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends tsProtoGlobalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
