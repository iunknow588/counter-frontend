"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_js_1 = __importDefault(require("protobufjs/minimal.js"));
exports.protobufPackage = "injective.txfees.v1beta1";
function createBaseParams() {
    return {
        maxGasWantedPerTx: "0",
        highGasTxThreshold: "0",
        minGasPriceForHighGasTx: "",
        mempool1559Enabled: false,
        minGasPrice: "",
        defaultBaseFeeMultiplier: "",
        maxBaseFeeMultiplier: "",
        resetInterval: "0",
        maxBlockChangeRate: "",
        targetBlockSpacePercentRate: "",
        recheckFeeLowBaseFee: "",
        recheckFeeHighBaseFee: "",
        recheckFeeBaseFeeThresholdMultiplier: "",
    };
}
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_js_1.default.Writer.create(); }
        if (message.maxGasWantedPerTx !== "0") {
            writer.uint32(8).uint64(message.maxGasWantedPerTx);
        }
        if (message.highGasTxThreshold !== "0") {
            writer.uint32(16).uint64(message.highGasTxThreshold);
        }
        if (message.minGasPriceForHighGasTx !== "") {
            writer.uint32(26).string(message.minGasPriceForHighGasTx);
        }
        if (message.mempool1559Enabled === true) {
            writer.uint32(32).bool(message.mempool1559Enabled);
        }
        if (message.minGasPrice !== "") {
            writer.uint32(42).string(message.minGasPrice);
        }
        if (message.defaultBaseFeeMultiplier !== "") {
            writer.uint32(50).string(message.defaultBaseFeeMultiplier);
        }
        if (message.maxBaseFeeMultiplier !== "") {
            writer.uint32(58).string(message.maxBaseFeeMultiplier);
        }
        if (message.resetInterval !== "0") {
            writer.uint32(64).int64(message.resetInterval);
        }
        if (message.maxBlockChangeRate !== "") {
            writer.uint32(74).string(message.maxBlockChangeRate);
        }
        if (message.targetBlockSpacePercentRate !== "") {
            writer.uint32(82).string(message.targetBlockSpacePercentRate);
        }
        if (message.recheckFeeLowBaseFee !== "") {
            writer.uint32(90).string(message.recheckFeeLowBaseFee);
        }
        if (message.recheckFeeHighBaseFee !== "") {
            writer.uint32(98).string(message.recheckFeeHighBaseFee);
        }
        if (message.recheckFeeBaseFeeThresholdMultiplier !== "") {
            writer.uint32(106).string(message.recheckFeeBaseFeeThresholdMultiplier);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_js_1.default.Reader ? input : new minimal_js_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxGasWantedPerTx = longToString(reader.uint64());
                    break;
                case 2:
                    message.highGasTxThreshold = longToString(reader.uint64());
                    break;
                case 3:
                    message.minGasPriceForHighGasTx = reader.string();
                    break;
                case 4:
                    message.mempool1559Enabled = reader.bool();
                    break;
                case 5:
                    message.minGasPrice = reader.string();
                    break;
                case 6:
                    message.defaultBaseFeeMultiplier = reader.string();
                    break;
                case 7:
                    message.maxBaseFeeMultiplier = reader.string();
                    break;
                case 8:
                    message.resetInterval = longToString(reader.int64());
                    break;
                case 9:
                    message.maxBlockChangeRate = reader.string();
                    break;
                case 10:
                    message.targetBlockSpacePercentRate = reader.string();
                    break;
                case 11:
                    message.recheckFeeLowBaseFee = reader.string();
                    break;
                case 12:
                    message.recheckFeeHighBaseFee = reader.string();
                    break;
                case 13:
                    message.recheckFeeBaseFeeThresholdMultiplier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            maxGasWantedPerTx: isSet(object.maxGasWantedPerTx) ? String(object.maxGasWantedPerTx) : "0",
            highGasTxThreshold: isSet(object.highGasTxThreshold) ? String(object.highGasTxThreshold) : "0",
            minGasPriceForHighGasTx: isSet(object.minGasPriceForHighGasTx) ? String(object.minGasPriceForHighGasTx) : "",
            mempool1559Enabled: isSet(object.mempool1559Enabled) ? Boolean(object.mempool1559Enabled) : false,
            minGasPrice: isSet(object.minGasPrice) ? String(object.minGasPrice) : "",
            defaultBaseFeeMultiplier: isSet(object.defaultBaseFeeMultiplier) ? String(object.defaultBaseFeeMultiplier) : "",
            maxBaseFeeMultiplier: isSet(object.maxBaseFeeMultiplier) ? String(object.maxBaseFeeMultiplier) : "",
            resetInterval: isSet(object.resetInterval) ? String(object.resetInterval) : "0",
            maxBlockChangeRate: isSet(object.maxBlockChangeRate) ? String(object.maxBlockChangeRate) : "",
            targetBlockSpacePercentRate: isSet(object.targetBlockSpacePercentRate)
                ? String(object.targetBlockSpacePercentRate)
                : "",
            recheckFeeLowBaseFee: isSet(object.recheckFeeLowBaseFee) ? String(object.recheckFeeLowBaseFee) : "",
            recheckFeeHighBaseFee: isSet(object.recheckFeeHighBaseFee) ? String(object.recheckFeeHighBaseFee) : "",
            recheckFeeBaseFeeThresholdMultiplier: isSet(object.recheckFeeBaseFeeThresholdMultiplier)
                ? String(object.recheckFeeBaseFeeThresholdMultiplier)
                : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.maxGasWantedPerTx !== undefined && (obj.maxGasWantedPerTx = message.maxGasWantedPerTx);
        message.highGasTxThreshold !== undefined && (obj.highGasTxThreshold = message.highGasTxThreshold);
        message.minGasPriceForHighGasTx !== undefined && (obj.minGasPriceForHighGasTx = message.minGasPriceForHighGasTx);
        message.mempool1559Enabled !== undefined && (obj.mempool1559Enabled = message.mempool1559Enabled);
        message.minGasPrice !== undefined && (obj.minGasPrice = message.minGasPrice);
        message.defaultBaseFeeMultiplier !== undefined && (obj.defaultBaseFeeMultiplier = message.defaultBaseFeeMultiplier);
        message.maxBaseFeeMultiplier !== undefined && (obj.maxBaseFeeMultiplier = message.maxBaseFeeMultiplier);
        message.resetInterval !== undefined && (obj.resetInterval = message.resetInterval);
        message.maxBlockChangeRate !== undefined && (obj.maxBlockChangeRate = message.maxBlockChangeRate);
        message.targetBlockSpacePercentRate !== undefined &&
            (obj.targetBlockSpacePercentRate = message.targetBlockSpacePercentRate);
        message.recheckFeeLowBaseFee !== undefined && (obj.recheckFeeLowBaseFee = message.recheckFeeLowBaseFee);
        message.recheckFeeHighBaseFee !== undefined && (obj.recheckFeeHighBaseFee = message.recheckFeeHighBaseFee);
        message.recheckFeeBaseFeeThresholdMultiplier !== undefined &&
            (obj.recheckFeeBaseFeeThresholdMultiplier = message.recheckFeeBaseFeeThresholdMultiplier);
        return obj;
    },
    create: function (base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var message = createBaseParams();
        message.maxGasWantedPerTx = (_a = object.maxGasWantedPerTx) !== null && _a !== void 0 ? _a : "0";
        message.highGasTxThreshold = (_b = object.highGasTxThreshold) !== null && _b !== void 0 ? _b : "0";
        message.minGasPriceForHighGasTx = (_c = object.minGasPriceForHighGasTx) !== null && _c !== void 0 ? _c : "";
        message.mempool1559Enabled = (_d = object.mempool1559Enabled) !== null && _d !== void 0 ? _d : false;
        message.minGasPrice = (_e = object.minGasPrice) !== null && _e !== void 0 ? _e : "";
        message.defaultBaseFeeMultiplier = (_f = object.defaultBaseFeeMultiplier) !== null && _f !== void 0 ? _f : "";
        message.maxBaseFeeMultiplier = (_g = object.maxBaseFeeMultiplier) !== null && _g !== void 0 ? _g : "";
        message.resetInterval = (_h = object.resetInterval) !== null && _h !== void 0 ? _h : "0";
        message.maxBlockChangeRate = (_j = object.maxBlockChangeRate) !== null && _j !== void 0 ? _j : "";
        message.targetBlockSpacePercentRate = (_k = object.targetBlockSpacePercentRate) !== null && _k !== void 0 ? _k : "";
        message.recheckFeeLowBaseFee = (_l = object.recheckFeeLowBaseFee) !== null && _l !== void 0 ? _l : "";
        message.recheckFeeHighBaseFee = (_m = object.recheckFeeHighBaseFee) !== null && _m !== void 0 ? _m : "";
        message.recheckFeeBaseFeeThresholdMultiplier = (_o = object.recheckFeeBaseFeeThresholdMultiplier) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (minimal_js_1.default.util.Long !== long_1.default) {
    minimal_js_1.default.util.Long = long_1.default;
    minimal_js_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
