/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
export const protobufPackage = "injective.txfees.v1beta1";
function createBaseParams() {
    return {
        maxGasWantedPerTx: "0",
        highGasTxThreshold: "0",
        minGasPriceForHighGasTx: "",
        mempool1559Enabled: false,
        minGasPrice: "",
        defaultBaseFeeMultiplier: "",
        maxBaseFeeMultiplier: "",
        resetInterval: "0",
        maxBlockChangeRate: "",
        targetBlockSpacePercentRate: "",
        recheckFeeLowBaseFee: "",
        recheckFeeHighBaseFee: "",
        recheckFeeBaseFeeThresholdMultiplier: "",
    };
}
export const Params = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.maxGasWantedPerTx !== "0") {
            writer.uint32(8).uint64(message.maxGasWantedPerTx);
        }
        if (message.highGasTxThreshold !== "0") {
            writer.uint32(16).uint64(message.highGasTxThreshold);
        }
        if (message.minGasPriceForHighGasTx !== "") {
            writer.uint32(26).string(message.minGasPriceForHighGasTx);
        }
        if (message.mempool1559Enabled === true) {
            writer.uint32(32).bool(message.mempool1559Enabled);
        }
        if (message.minGasPrice !== "") {
            writer.uint32(42).string(message.minGasPrice);
        }
        if (message.defaultBaseFeeMultiplier !== "") {
            writer.uint32(50).string(message.defaultBaseFeeMultiplier);
        }
        if (message.maxBaseFeeMultiplier !== "") {
            writer.uint32(58).string(message.maxBaseFeeMultiplier);
        }
        if (message.resetInterval !== "0") {
            writer.uint32(64).int64(message.resetInterval);
        }
        if (message.maxBlockChangeRate !== "") {
            writer.uint32(74).string(message.maxBlockChangeRate);
        }
        if (message.targetBlockSpacePercentRate !== "") {
            writer.uint32(82).string(message.targetBlockSpacePercentRate);
        }
        if (message.recheckFeeLowBaseFee !== "") {
            writer.uint32(90).string(message.recheckFeeLowBaseFee);
        }
        if (message.recheckFeeHighBaseFee !== "") {
            writer.uint32(98).string(message.recheckFeeHighBaseFee);
        }
        if (message.recheckFeeBaseFeeThresholdMultiplier !== "") {
            writer.uint32(106).string(message.recheckFeeBaseFeeThresholdMultiplier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxGasWantedPerTx = longToString(reader.uint64());
                    break;
                case 2:
                    message.highGasTxThreshold = longToString(reader.uint64());
                    break;
                case 3:
                    message.minGasPriceForHighGasTx = reader.string();
                    break;
                case 4:
                    message.mempool1559Enabled = reader.bool();
                    break;
                case 5:
                    message.minGasPrice = reader.string();
                    break;
                case 6:
                    message.defaultBaseFeeMultiplier = reader.string();
                    break;
                case 7:
                    message.maxBaseFeeMultiplier = reader.string();
                    break;
                case 8:
                    message.resetInterval = longToString(reader.int64());
                    break;
                case 9:
                    message.maxBlockChangeRate = reader.string();
                    break;
                case 10:
                    message.targetBlockSpacePercentRate = reader.string();
                    break;
                case 11:
                    message.recheckFeeLowBaseFee = reader.string();
                    break;
                case 12:
                    message.recheckFeeHighBaseFee = reader.string();
                    break;
                case 13:
                    message.recheckFeeBaseFeeThresholdMultiplier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxGasWantedPerTx: isSet(object.maxGasWantedPerTx) ? String(object.maxGasWantedPerTx) : "0",
            highGasTxThreshold: isSet(object.highGasTxThreshold) ? String(object.highGasTxThreshold) : "0",
            minGasPriceForHighGasTx: isSet(object.minGasPriceForHighGasTx) ? String(object.minGasPriceForHighGasTx) : "",
            mempool1559Enabled: isSet(object.mempool1559Enabled) ? Boolean(object.mempool1559Enabled) : false,
            minGasPrice: isSet(object.minGasPrice) ? String(object.minGasPrice) : "",
            defaultBaseFeeMultiplier: isSet(object.defaultBaseFeeMultiplier) ? String(object.defaultBaseFeeMultiplier) : "",
            maxBaseFeeMultiplier: isSet(object.maxBaseFeeMultiplier) ? String(object.maxBaseFeeMultiplier) : "",
            resetInterval: isSet(object.resetInterval) ? String(object.resetInterval) : "0",
            maxBlockChangeRate: isSet(object.maxBlockChangeRate) ? String(object.maxBlockChangeRate) : "",
            targetBlockSpacePercentRate: isSet(object.targetBlockSpacePercentRate)
                ? String(object.targetBlockSpacePercentRate)
                : "",
            recheckFeeLowBaseFee: isSet(object.recheckFeeLowBaseFee) ? String(object.recheckFeeLowBaseFee) : "",
            recheckFeeHighBaseFee: isSet(object.recheckFeeHighBaseFee) ? String(object.recheckFeeHighBaseFee) : "",
            recheckFeeBaseFeeThresholdMultiplier: isSet(object.recheckFeeBaseFeeThresholdMultiplier)
                ? String(object.recheckFeeBaseFeeThresholdMultiplier)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.maxGasWantedPerTx !== undefined && (obj.maxGasWantedPerTx = message.maxGasWantedPerTx);
        message.highGasTxThreshold !== undefined && (obj.highGasTxThreshold = message.highGasTxThreshold);
        message.minGasPriceForHighGasTx !== undefined && (obj.minGasPriceForHighGasTx = message.minGasPriceForHighGasTx);
        message.mempool1559Enabled !== undefined && (obj.mempool1559Enabled = message.mempool1559Enabled);
        message.minGasPrice !== undefined && (obj.minGasPrice = message.minGasPrice);
        message.defaultBaseFeeMultiplier !== undefined && (obj.defaultBaseFeeMultiplier = message.defaultBaseFeeMultiplier);
        message.maxBaseFeeMultiplier !== undefined && (obj.maxBaseFeeMultiplier = message.maxBaseFeeMultiplier);
        message.resetInterval !== undefined && (obj.resetInterval = message.resetInterval);
        message.maxBlockChangeRate !== undefined && (obj.maxBlockChangeRate = message.maxBlockChangeRate);
        message.targetBlockSpacePercentRate !== undefined &&
            (obj.targetBlockSpacePercentRate = message.targetBlockSpacePercentRate);
        message.recheckFeeLowBaseFee !== undefined && (obj.recheckFeeLowBaseFee = message.recheckFeeLowBaseFee);
        message.recheckFeeHighBaseFee !== undefined && (obj.recheckFeeHighBaseFee = message.recheckFeeHighBaseFee);
        message.recheckFeeBaseFeeThresholdMultiplier !== undefined &&
            (obj.recheckFeeBaseFeeThresholdMultiplier = message.recheckFeeBaseFeeThresholdMultiplier);
        return obj;
    },
    create(base) {
        return Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.maxGasWantedPerTx = object.maxGasWantedPerTx ?? "0";
        message.highGasTxThreshold = object.highGasTxThreshold ?? "0";
        message.minGasPriceForHighGasTx = object.minGasPriceForHighGasTx ?? "";
        message.mempool1559Enabled = object.mempool1559Enabled ?? false;
        message.minGasPrice = object.minGasPrice ?? "";
        message.defaultBaseFeeMultiplier = object.defaultBaseFeeMultiplier ?? "";
        message.maxBaseFeeMultiplier = object.maxBaseFeeMultiplier ?? "";
        message.resetInterval = object.resetInterval ?? "0";
        message.maxBlockChangeRate = object.maxBlockChangeRate ?? "";
        message.targetBlockSpacePercentRate = object.targetBlockSpacePercentRate ?? "";
        message.recheckFeeLowBaseFee = object.recheckFeeLowBaseFee ?? "";
        message.recheckFeeHighBaseFee = object.recheckFeeHighBaseFee ?? "";
        message.recheckFeeBaseFeeThresholdMultiplier = object.recheckFeeBaseFeeThresholdMultiplier ?? "";
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
