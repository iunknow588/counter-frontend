/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "babylon.btclightclient.v1";

/**
 * BTCHeaderInfo is a structure that contains all relevant information about a
 * BTC header
 *  - Full header bytes
 *  - Header hash for easy retrieval
 *  - Height of the header in the BTC chain
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 */
export interface BTCHeaderInfo {
  header: Uint8Array;
  hash: Uint8Array;
  height: number;
  work: Uint8Array;
}

function createBaseBTCHeaderInfo(): BTCHeaderInfo {
  return {
    header: new Uint8Array(),
    hash: new Uint8Array(),
    height: 0,
    work: new Uint8Array(),
  };
}

export const BTCHeaderInfo = {
  encode(
    message: BTCHeaderInfo,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.header.length !== 0) {
      writer.uint32(10).bytes(message.header);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint32(message.height);
    }
    if (message.work.length !== 0) {
      writer.uint32(34).bytes(message.work);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BTCHeaderInfo {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCHeaderInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.header = reader.bytes();
          break;
        case 2:
          message.hash = reader.bytes();
          break;
        case 3:
          message.height = reader.uint32();
          break;
        case 4:
          message.work = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BTCHeaderInfo {
    return {
      header: isSet(object.header)
        ? bytesFromBase64(object.header)
        : new Uint8Array(),
      hash: isSet(object.hash)
        ? bytesFromBase64(object.hash)
        : new Uint8Array(),
      height: isSet(object.height) ? Number(object.height) : 0,
      work: isSet(object.work)
        ? bytesFromBase64(object.work)
        : new Uint8Array(),
    };
  },

  toJSON(message: BTCHeaderInfo): unknown {
    const obj: any = {};
    message.header !== undefined &&
      (obj.header = base64FromBytes(
        message.header !== undefined ? message.header : new Uint8Array()
      ));
    message.hash !== undefined &&
      (obj.hash = base64FromBytes(
        message.hash !== undefined ? message.hash : new Uint8Array()
      ));
    message.height !== undefined && (obj.height = Math.round(message.height));
    message.work !== undefined &&
      (obj.work = base64FromBytes(
        message.work !== undefined ? message.work : new Uint8Array()
      ));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<BTCHeaderInfo>, I>>(
    object: I
  ): BTCHeaderInfo {
    const message = createBaseBTCHeaderInfo();
    message.header = object.header ?? new Uint8Array();
    message.hash = object.hash ?? new Uint8Array();
    message.height = object.height ?? 0;
    message.work = object.work ?? new Uint8Array();
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (const byte of arr) {
    bin.push(String.fromCharCode(byte));
  }
  return btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
