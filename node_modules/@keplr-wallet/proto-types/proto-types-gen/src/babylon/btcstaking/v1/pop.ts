/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "babylon.btcstaking.v1";

/** BTCSigType indicates the type of btc_sig in a pop */
export enum BTCSigType {
  /** BIP340 - BIP340 means the btc_sig will follow the BIP-340 encoding */
  BIP340 = 0,
  /** BIP322 - BIP322 means the btc_sig will follow the BIP-322 encoding */
  BIP322 = 1,
  /**
   * ECDSA - ECDSA means the btc_sig will follow the ECDSA encoding
   * ref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
   */
  ECDSA = 2,
  UNRECOGNIZED = -1,
}

export function bTCSigTypeFromJSON(object: any): BTCSigType {
  switch (object) {
    case 0:
    case "BIP340":
      return BTCSigType.BIP340;
    case 1:
    case "BIP322":
      return BTCSigType.BIP322;
    case 2:
    case "ECDSA":
      return BTCSigType.ECDSA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BTCSigType.UNRECOGNIZED;
  }
}

export function bTCSigTypeToJSON(object: BTCSigType): string {
  switch (object) {
    case BTCSigType.BIP340:
      return "BIP340";
    case BTCSigType.BIP322:
      return "BIP322";
    case BTCSigType.ECDSA:
      return "ECDSA";
    default:
      return "UNKNOWN";
  }
}

/**
 * ProofOfPossessionBTC is the proof of possession that a Babylon
 * address and a Bitcoin secp256k1 secret key are held by the same
 * person
 */
export interface ProofOfPossessionBTC {
  /** btc_sig_type indicates the type of btc_sig in the pop */
  btcSigType: BTCSigType;
  /**
   * btc_sig is the signature generated via sign(sk_btc, babylon_staker_address)
   * the signature follows encoding in either BIP-340 spec or BIP-322 spec
   */
  btcSig: Uint8Array;
}

/**
 * BIP322Sig is a BIP-322 signature together with the address corresponding to
 * the signer
 */
export interface BIP322Sig {
  /** address is the signer's address */
  address: string;
  /** sig is the actual signature in BIP-322 format */
  sig: Uint8Array;
}

function createBaseProofOfPossessionBTC(): ProofOfPossessionBTC {
  return { btcSigType: 0, btcSig: new Uint8Array() };
}

export const ProofOfPossessionBTC = {
  encode(
    message: ProofOfPossessionBTC,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.btcSigType !== 0) {
      writer.uint32(8).int32(message.btcSigType);
    }
    if (message.btcSig.length !== 0) {
      writer.uint32(18).bytes(message.btcSig);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): ProofOfPossessionBTC {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProofOfPossessionBTC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.btcSigType = reader.int32() as any;
          break;
        case 2:
          message.btcSig = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ProofOfPossessionBTC {
    return {
      btcSigType: isSet(object.btcSigType)
        ? bTCSigTypeFromJSON(object.btcSigType)
        : 0,
      btcSig: isSet(object.btcSig)
        ? bytesFromBase64(object.btcSig)
        : new Uint8Array(),
    };
  },

  toJSON(message: ProofOfPossessionBTC): unknown {
    const obj: any = {};
    message.btcSigType !== undefined &&
      (obj.btcSigType = bTCSigTypeToJSON(message.btcSigType));
    message.btcSig !== undefined &&
      (obj.btcSig = base64FromBytes(
        message.btcSig !== undefined ? message.btcSig : new Uint8Array()
      ));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ProofOfPossessionBTC>, I>>(
    object: I
  ): ProofOfPossessionBTC {
    const message = createBaseProofOfPossessionBTC();
    message.btcSigType = object.btcSigType ?? 0;
    message.btcSig = object.btcSig ?? new Uint8Array();
    return message;
  },
};

function createBaseBIP322Sig(): BIP322Sig {
  return { address: "", sig: new Uint8Array() };
}

export const BIP322Sig = {
  encode(
    message: BIP322Sig,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.sig.length !== 0) {
      writer.uint32(18).bytes(message.sig);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BIP322Sig {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBIP322Sig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.sig = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BIP322Sig {
    return {
      address: isSet(object.address) ? String(object.address) : "",
      sig: isSet(object.sig) ? bytesFromBase64(object.sig) : new Uint8Array(),
    };
  },

  toJSON(message: BIP322Sig): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    message.sig !== undefined &&
      (obj.sig = base64FromBytes(
        message.sig !== undefined ? message.sig : new Uint8Array()
      ));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<BIP322Sig>, I>>(
    object: I
  ): BIP322Sig {
    const message = createBaseBIP322Sig();
    message.address = object.address ?? "";
    message.sig = object.sig ?? new Uint8Array();
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (const byte of arr) {
    bin.push(String.fromCharCode(byte));
  }
  return btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
