/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "babylon.btcstaking.v1";

/** Params defines the parameters for the module. */
export interface Params {
  /**
   * PARAMETERS COVERING STAKING
   * covenant_pks is the list of public keys held by the covenant committee
   * each PK follows encoding in BIP-340 spec on Bitcoin
   */
  covenantPks: Uint8Array[];
  /**
   * covenant_quorum is the minimum number of signatures needed for the covenant
   * multisignature
   */
  covenantQuorum: number;
  /** min_staking_value_sat is the minimum of satoshis locked in staking output */
  minStakingValueSat: string;
  /** max_staking_value_sat is the maximum of satoshis locked in staking output */
  maxStakingValueSat: string;
  /**
   * min_staking_time is the minimum lock time specified in staking output
   * script
   */
  minStakingTimeBlocks: number;
  /**
   * max_staking_time_blocks is the maximum lock time time specified in staking
   * output script
   */
  maxStakingTimeBlocks: number;
  /**
   * PARAMETERS COVERING SLASHING
   * slashing_pk_script is the pk_script expected in slashing output ie. the
   * first output of slashing transaction
   */
  slashingPkScript: Uint8Array;
  /**
   * min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified
   * in Satoshi) needed for the pre-signed slashing tx. It covers both:
   * staking slashing transaction and unbonding slashing transaction
   */
  minSlashingTxFeeSat: string;
  /**
   * slashing_rate determines the portion of the staked amount to be slashed,
   * expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2 decimal
   * places
   */
  slashingRate: string;
  /**
   * PARAMETERS COVERING UNBONDING
   * unbonding_time is the exact unbonding time required from unbonding
   * transaction it must be larger than `checkpoint_finalization_timeout` from
   * `btccheckpoint` module
   */
  unbondingTimeBlocks: number;
  /** unbonding_fee exact fee required for unbonding transaction */
  unbondingFeeSat: string;
  /**
   * PARAMETERS COVERING FINALITY PROVIDERS
   * min_commission_rate is the chain-wide minimum commission rate that a
   * finality provider can charge their delegators expressed as a decimal (e.g.,
   * 0.5 for 50%). Maximal precion is 2 decimal places
   */
  minCommissionRate: string;
  /** base gas fee for delegation creation */
  delegationCreationBaseGasFee: string;
  /**
   * allow_list_expiration_height is the height at which the allow list expires
   * i.e all staking transactions are allowed to enter Babylon chain afterwards
   * setting it to 0 means allow list is disabled
   */
  allowListExpirationHeight: string;
  /**
   * btc_activation_height is the btc height from which parameters are activated
   * (inclusive)
   */
  btcActivationHeight: number;
}

/** HeightVersionPair pairs a btc height with a version of the parameters */
export interface HeightVersionPair {
  /**
   * start_height is the height from which the parameters are activated
   * (inclusive)
   */
  startHeight: string;
  /** version is the version of the parameters */
  version: number;
}

/** HeightToVersionMap maps a btc height to a version of the parameters */
export interface HeightToVersionMap {
  /**
   * Pairs must be sorted by `start_height` in ascending order, without
   * duplicates
   */
  pairs: HeightVersionPair[];
}

/** StoredParams attach information about the version of stored parameters */
export interface StoredParams {
  /**
   * version of the stored parameters. Each parameters update
   * increments version number by 1
   */
  version: number;
  /** NOTE: Parameters must always be provided */
  params: Params | undefined;
}

function createBaseParams(): Params {
  return {
    covenantPks: [],
    covenantQuorum: 0,
    minStakingValueSat: "0",
    maxStakingValueSat: "0",
    minStakingTimeBlocks: 0,
    maxStakingTimeBlocks: 0,
    slashingPkScript: new Uint8Array(),
    minSlashingTxFeeSat: "0",
    slashingRate: "",
    unbondingTimeBlocks: 0,
    unbondingFeeSat: "0",
    minCommissionRate: "",
    delegationCreationBaseGasFee: "0",
    allowListExpirationHeight: "0",
    btcActivationHeight: 0,
  };
}

export const Params = {
  encode(
    message: Params,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.covenantPks) {
      writer.uint32(10).bytes(v!);
    }
    if (message.covenantQuorum !== 0) {
      writer.uint32(16).uint32(message.covenantQuorum);
    }
    if (message.minStakingValueSat !== "0") {
      writer.uint32(24).int64(message.minStakingValueSat);
    }
    if (message.maxStakingValueSat !== "0") {
      writer.uint32(32).int64(message.maxStakingValueSat);
    }
    if (message.minStakingTimeBlocks !== 0) {
      writer.uint32(40).uint32(message.minStakingTimeBlocks);
    }
    if (message.maxStakingTimeBlocks !== 0) {
      writer.uint32(48).uint32(message.maxStakingTimeBlocks);
    }
    if (message.slashingPkScript.length !== 0) {
      writer.uint32(58).bytes(message.slashingPkScript);
    }
    if (message.minSlashingTxFeeSat !== "0") {
      writer.uint32(64).int64(message.minSlashingTxFeeSat);
    }
    if (message.slashingRate !== "") {
      writer.uint32(74).string(message.slashingRate);
    }
    if (message.unbondingTimeBlocks !== 0) {
      writer.uint32(80).uint32(message.unbondingTimeBlocks);
    }
    if (message.unbondingFeeSat !== "0") {
      writer.uint32(88).int64(message.unbondingFeeSat);
    }
    if (message.minCommissionRate !== "") {
      writer.uint32(98).string(message.minCommissionRate);
    }
    if (message.delegationCreationBaseGasFee !== "0") {
      writer.uint32(104).uint64(message.delegationCreationBaseGasFee);
    }
    if (message.allowListExpirationHeight !== "0") {
      writer.uint32(112).uint64(message.allowListExpirationHeight);
    }
    if (message.btcActivationHeight !== 0) {
      writer.uint32(120).uint32(message.btcActivationHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.covenantPks.push(reader.bytes());
          break;
        case 2:
          message.covenantQuorum = reader.uint32();
          break;
        case 3:
          message.minStakingValueSat = longToString(reader.int64() as Long);
          break;
        case 4:
          message.maxStakingValueSat = longToString(reader.int64() as Long);
          break;
        case 5:
          message.minStakingTimeBlocks = reader.uint32();
          break;
        case 6:
          message.maxStakingTimeBlocks = reader.uint32();
          break;
        case 7:
          message.slashingPkScript = reader.bytes();
          break;
        case 8:
          message.minSlashingTxFeeSat = longToString(reader.int64() as Long);
          break;
        case 9:
          message.slashingRate = reader.string();
          break;
        case 10:
          message.unbondingTimeBlocks = reader.uint32();
          break;
        case 11:
          message.unbondingFeeSat = longToString(reader.int64() as Long);
          break;
        case 12:
          message.minCommissionRate = reader.string();
          break;
        case 13:
          message.delegationCreationBaseGasFee = longToString(
            reader.uint64() as Long
          );
          break;
        case 14:
          message.allowListExpirationHeight = longToString(
            reader.uint64() as Long
          );
          break;
        case 15:
          message.btcActivationHeight = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      covenantPks: Array.isArray(object?.covenantPks)
        ? object.covenantPks.map((e: any) => bytesFromBase64(e))
        : [],
      covenantQuorum: isSet(object.covenantQuorum)
        ? Number(object.covenantQuorum)
        : 0,
      minStakingValueSat: isSet(object.minStakingValueSat)
        ? String(object.minStakingValueSat)
        : "0",
      maxStakingValueSat: isSet(object.maxStakingValueSat)
        ? String(object.maxStakingValueSat)
        : "0",
      minStakingTimeBlocks: isSet(object.minStakingTimeBlocks)
        ? Number(object.minStakingTimeBlocks)
        : 0,
      maxStakingTimeBlocks: isSet(object.maxStakingTimeBlocks)
        ? Number(object.maxStakingTimeBlocks)
        : 0,
      slashingPkScript: isSet(object.slashingPkScript)
        ? bytesFromBase64(object.slashingPkScript)
        : new Uint8Array(),
      minSlashingTxFeeSat: isSet(object.minSlashingTxFeeSat)
        ? String(object.minSlashingTxFeeSat)
        : "0",
      slashingRate: isSet(object.slashingRate)
        ? String(object.slashingRate)
        : "",
      unbondingTimeBlocks: isSet(object.unbondingTimeBlocks)
        ? Number(object.unbondingTimeBlocks)
        : 0,
      unbondingFeeSat: isSet(object.unbondingFeeSat)
        ? String(object.unbondingFeeSat)
        : "0",
      minCommissionRate: isSet(object.minCommissionRate)
        ? String(object.minCommissionRate)
        : "",
      delegationCreationBaseGasFee: isSet(object.delegationCreationBaseGasFee)
        ? String(object.delegationCreationBaseGasFee)
        : "0",
      allowListExpirationHeight: isSet(object.allowListExpirationHeight)
        ? String(object.allowListExpirationHeight)
        : "0",
      btcActivationHeight: isSet(object.btcActivationHeight)
        ? Number(object.btcActivationHeight)
        : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.covenantPks) {
      obj.covenantPks = message.covenantPks.map((e) =>
        base64FromBytes(e !== undefined ? e : new Uint8Array())
      );
    } else {
      obj.covenantPks = [];
    }
    message.covenantQuorum !== undefined &&
      (obj.covenantQuorum = Math.round(message.covenantQuorum));
    message.minStakingValueSat !== undefined &&
      (obj.minStakingValueSat = message.minStakingValueSat);
    message.maxStakingValueSat !== undefined &&
      (obj.maxStakingValueSat = message.maxStakingValueSat);
    message.minStakingTimeBlocks !== undefined &&
      (obj.minStakingTimeBlocks = Math.round(message.minStakingTimeBlocks));
    message.maxStakingTimeBlocks !== undefined &&
      (obj.maxStakingTimeBlocks = Math.round(message.maxStakingTimeBlocks));
    message.slashingPkScript !== undefined &&
      (obj.slashingPkScript = base64FromBytes(
        message.slashingPkScript !== undefined
          ? message.slashingPkScript
          : new Uint8Array()
      ));
    message.minSlashingTxFeeSat !== undefined &&
      (obj.minSlashingTxFeeSat = message.minSlashingTxFeeSat);
    message.slashingRate !== undefined &&
      (obj.slashingRate = message.slashingRate);
    message.unbondingTimeBlocks !== undefined &&
      (obj.unbondingTimeBlocks = Math.round(message.unbondingTimeBlocks));
    message.unbondingFeeSat !== undefined &&
      (obj.unbondingFeeSat = message.unbondingFeeSat);
    message.minCommissionRate !== undefined &&
      (obj.minCommissionRate = message.minCommissionRate);
    message.delegationCreationBaseGasFee !== undefined &&
      (obj.delegationCreationBaseGasFee = message.delegationCreationBaseGasFee);
    message.allowListExpirationHeight !== undefined &&
      (obj.allowListExpirationHeight = message.allowListExpirationHeight);
    message.btcActivationHeight !== undefined &&
      (obj.btcActivationHeight = Math.round(message.btcActivationHeight));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.covenantPks = object.covenantPks?.map((e) => e) || [];
    message.covenantQuorum = object.covenantQuorum ?? 0;
    message.minStakingValueSat = object.minStakingValueSat ?? "0";
    message.maxStakingValueSat = object.maxStakingValueSat ?? "0";
    message.minStakingTimeBlocks = object.minStakingTimeBlocks ?? 0;
    message.maxStakingTimeBlocks = object.maxStakingTimeBlocks ?? 0;
    message.slashingPkScript = object.slashingPkScript ?? new Uint8Array();
    message.minSlashingTxFeeSat = object.minSlashingTxFeeSat ?? "0";
    message.slashingRate = object.slashingRate ?? "";
    message.unbondingTimeBlocks = object.unbondingTimeBlocks ?? 0;
    message.unbondingFeeSat = object.unbondingFeeSat ?? "0";
    message.minCommissionRate = object.minCommissionRate ?? "";
    message.delegationCreationBaseGasFee =
      object.delegationCreationBaseGasFee ?? "0";
    message.allowListExpirationHeight = object.allowListExpirationHeight ?? "0";
    message.btcActivationHeight = object.btcActivationHeight ?? 0;
    return message;
  },
};

function createBaseHeightVersionPair(): HeightVersionPair {
  return { startHeight: "0", version: 0 };
}

export const HeightVersionPair = {
  encode(
    message: HeightVersionPair,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.startHeight !== "0") {
      writer.uint32(8).uint64(message.startHeight);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HeightVersionPair {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeightVersionPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startHeight = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.version = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): HeightVersionPair {
    return {
      startHeight: isSet(object.startHeight) ? String(object.startHeight) : "0",
      version: isSet(object.version) ? Number(object.version) : 0,
    };
  },

  toJSON(message: HeightVersionPair): unknown {
    const obj: any = {};
    message.startHeight !== undefined &&
      (obj.startHeight = message.startHeight);
    message.version !== undefined &&
      (obj.version = Math.round(message.version));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<HeightVersionPair>, I>>(
    object: I
  ): HeightVersionPair {
    const message = createBaseHeightVersionPair();
    message.startHeight = object.startHeight ?? "0";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseHeightToVersionMap(): HeightToVersionMap {
  return { pairs: [] };
}

export const HeightToVersionMap = {
  encode(
    message: HeightToVersionMap,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.pairs) {
      HeightVersionPair.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HeightToVersionMap {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeightToVersionMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pairs.push(HeightVersionPair.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): HeightToVersionMap {
    return {
      pairs: Array.isArray(object?.pairs)
        ? object.pairs.map((e: any) => HeightVersionPair.fromJSON(e))
        : [],
    };
  },

  toJSON(message: HeightToVersionMap): unknown {
    const obj: any = {};
    if (message.pairs) {
      obj.pairs = message.pairs.map((e) =>
        e ? HeightVersionPair.toJSON(e) : undefined
      );
    } else {
      obj.pairs = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<HeightToVersionMap>, I>>(
    object: I
  ): HeightToVersionMap {
    const message = createBaseHeightToVersionMap();
    message.pairs =
      object.pairs?.map((e) => HeightVersionPair.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStoredParams(): StoredParams {
  return { version: 0, params: undefined };
}

export const StoredParams = {
  encode(
    message: StoredParams,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StoredParams {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoredParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.version = reader.uint32();
          break;
        case 2:
          message.params = Params.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StoredParams {
    return {
      version: isSet(object.version) ? Number(object.version) : 0,
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: StoredParams): unknown {
    const obj: any = {};
    message.version !== undefined &&
      (obj.version = Math.round(message.version));
    message.params !== undefined &&
      (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<StoredParams>, I>>(
    object: I
  ): StoredParams {
    const message = createBaseStoredParams();
    message.version = object.version ?? 0;
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (const byte of arr) {
    bin.push(String.fromCharCode(byte));
  }
  return btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
