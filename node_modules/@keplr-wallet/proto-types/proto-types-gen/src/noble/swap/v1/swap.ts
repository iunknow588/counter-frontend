/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "noble.swap.v1";

export interface Route {
  /** ID of the Pool. */
  poolId: string;
  /** Destination denom after the Swap in the Pool. */
  denomTo: string;
}

export interface Swap {
  /** ID of the pool used in the swap. */
  poolId: string;
  /** The input coin for the swap. */
  in: Coin | undefined;
  /** The output coin after the swap. */
  out: Coin | undefined;
  /** Any fees incurred during the swap. */
  fees: Coin[];
}

function createBaseRoute(): Route {
  return { poolId: "0", denomTo: "" };
}

export const Route = {
  encode(message: Route, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.poolId !== "0") {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.denomTo !== "") {
      writer.uint32(18).string(message.denomTo);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Route {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.denomTo = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      poolId: isSet(object.poolId) ? String(object.poolId) : "0",
      denomTo: isSet(object.denomTo) ? String(object.denomTo) : "",
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    message.poolId !== undefined && (obj.poolId = message.poolId);
    message.denomTo !== undefined && (obj.denomTo = message.denomTo);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Route>, I>>(object: I): Route {
    const message = createBaseRoute();
    message.poolId = object.poolId ?? "0";
    message.denomTo = object.denomTo ?? "";
    return message;
  },
};

function createBaseSwap(): Swap {
  return { poolId: "0", in: undefined, out: undefined, fees: [] };
}

export const Swap = {
  encode(message: Swap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.poolId !== "0") {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.in !== undefined) {
      Coin.encode(message.in, writer.uint32(18).fork()).ldelim();
    }
    if (message.out !== undefined) {
      Coin.encode(message.out, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.fees) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Swap {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.in = Coin.decode(reader, reader.uint32());
          break;
        case 3:
          message.out = Coin.decode(reader, reader.uint32());
          break;
        case 4:
          message.fees.push(Coin.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Swap {
    return {
      poolId: isSet(object.poolId) ? String(object.poolId) : "0",
      in: isSet(object.in) ? Coin.fromJSON(object.in) : undefined,
      out: isSet(object.out) ? Coin.fromJSON(object.out) : undefined,
      fees: Array.isArray(object?.fees)
        ? object.fees.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Swap): unknown {
    const obj: any = {};
    message.poolId !== undefined && (obj.poolId = message.poolId);
    message.in !== undefined &&
      (obj.in = message.in ? Coin.toJSON(message.in) : undefined);
    message.out !== undefined &&
      (obj.out = message.out ? Coin.toJSON(message.out) : undefined);
    if (message.fees) {
      obj.fees = message.fees.map((e) => (e ? Coin.toJSON(e) : undefined));
    } else {
      obj.fees = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Swap>, I>>(object: I): Swap {
    const message = createBaseSwap();
    message.poolId = object.poolId ?? "0";
    message.in =
      object.in !== undefined && object.in !== null
        ? Coin.fromPartial(object.in)
        : undefined;
    message.out =
      object.out !== undefined && object.out !== null
        ? Coin.fromPartial(object.out)
        : undefined;
    message.fees = object.fees?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
