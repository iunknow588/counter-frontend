/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "noble.dollar.v1";

/** MsgClaimYield is a message holders of the Noble Dollar can use to claim their yield. */
export interface MsgClaimYield {
  signer: string;
}

/** MsgClaimYieldResponse is the response of the ClaimYield message. */
export interface MsgClaimYieldResponse {}

/** MsgSetPausedState allows the authority to configure the Noble Dollar Portal paused state. */
export interface MsgSetPausedState {
  signer: string;
  paused: boolean;
}

/** MsgSetPausedStateResponse is the response of the SetPausedState message. */
export interface MsgSetPausedStateResponse {}

function createBaseMsgClaimYield(): MsgClaimYield {
  return { signer: "" };
}

export const MsgClaimYield = {
  encode(
    message: MsgClaimYield,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimYield {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimYield();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signer = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgClaimYield {
    return {
      signer: isSet(object.signer) ? String(object.signer) : "",
    };
  },

  toJSON(message: MsgClaimYield): unknown {
    const obj: any = {};
    message.signer !== undefined && (obj.signer = message.signer);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<MsgClaimYield>, I>>(
    object: I
  ): MsgClaimYield {
    const message = createBaseMsgClaimYield();
    message.signer = object.signer ?? "";
    return message;
  },
};

function createBaseMsgClaimYieldResponse(): MsgClaimYieldResponse {
  return {};
}

export const MsgClaimYieldResponse = {
  encode(
    _: MsgClaimYieldResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): MsgClaimYieldResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimYieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgClaimYieldResponse {
    return {};
  },

  toJSON(_: MsgClaimYieldResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<MsgClaimYieldResponse>, I>>(
    _: I
  ): MsgClaimYieldResponse {
    const message = createBaseMsgClaimYieldResponse();
    return message;
  },
};

function createBaseMsgSetPausedState(): MsgSetPausedState {
  return { signer: "", paused: false };
}

export const MsgSetPausedState = {
  encode(
    message: MsgSetPausedState,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.paused === true) {
      writer.uint32(16).bool(message.paused);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetPausedState {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetPausedState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signer = reader.string();
          break;
        case 2:
          message.paused = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgSetPausedState {
    return {
      signer: isSet(object.signer) ? String(object.signer) : "",
      paused: isSet(object.paused) ? Boolean(object.paused) : false,
    };
  },

  toJSON(message: MsgSetPausedState): unknown {
    const obj: any = {};
    message.signer !== undefined && (obj.signer = message.signer);
    message.paused !== undefined && (obj.paused = message.paused);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<MsgSetPausedState>, I>>(
    object: I
  ): MsgSetPausedState {
    const message = createBaseMsgSetPausedState();
    message.signer = object.signer ?? "";
    message.paused = object.paused ?? false;
    return message;
  },
};

function createBaseMsgSetPausedStateResponse(): MsgSetPausedStateResponse {
  return {};
}

export const MsgSetPausedStateResponse = {
  encode(
    _: MsgSetPausedStateResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number
  ): MsgSetPausedStateResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetPausedStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgSetPausedStateResponse {
    return {};
  },

  toJSON(_: MsgSetPausedStateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<MsgSetPausedStateResponse>, I>>(
    _: I
  ): MsgSetPausedStateResponse {
    const message = createBaseMsgSetPausedStateResponse();
    return message;
  },
};

export interface Msg {
  ClaimYield(request: MsgClaimYield): Promise<MsgClaimYieldResponse>;
  SetPausedState(
    request: MsgSetPausedState
  ): Promise<MsgSetPausedStateResponse>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
