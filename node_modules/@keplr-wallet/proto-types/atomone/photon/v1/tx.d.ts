import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "../../../atomone/photon/v1/photon";
export declare const protobufPackage = "atomone.photon.v1";
/** MsgMintPhoton defines an sdk.Msg for burning atone and minting photons. */
export interface MsgMintPhoton {
    toAddress: string;
    amount: Coin | undefined;
}
export interface MsgMintPhotonResponse {
    minted: Coin | undefined;
    /** conversion_rate represents the factor used to convert atone to photon. */
    conversionRate: string;
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
    /**
     * authority is the address that controls the module (defaults to x/gov unless
     * overwritten).
     */
    authority: string;
    /**
     * params defines the x/gov parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: Params | undefined;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgMintPhoton: {
    encode(message: MsgMintPhoton, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintPhoton;
    fromJSON(object: any): MsgMintPhoton;
    toJSON(message: MsgMintPhoton): unknown;
    fromPartial<I extends {
        toAddress?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        toAddress?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgMintPhoton>, never>>(object: I): MsgMintPhoton;
};
export declare const MsgMintPhotonResponse: {
    encode(message: MsgMintPhotonResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintPhotonResponse;
    fromJSON(object: any): MsgMintPhotonResponse;
    toJSON(message: MsgMintPhotonResponse): unknown;
    fromPartial<I extends {
        minted?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        conversionRate?: string | undefined;
    } & {
        minted?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["minted"], keyof Coin>, never>) | undefined;
        conversionRate?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgMintPhotonResponse>, never>>(object: I): MsgMintPhotonResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        params?: {
            mintDisabled?: boolean | undefined;
            txFeeExceptions?: string[] | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        params?: ({
            mintDisabled?: boolean | undefined;
            txFeeExceptions?: string[] | undefined;
        } & {
            mintDisabled?: boolean | undefined;
            txFeeExceptions?: (string[] & string[] & Record<Exclude<keyof I["params"]["txFeeExceptions"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgUpdateParams>, never>>(object: I): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateParamsResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    /** MintPhoton defines a method to burn atone and mint photons. */
    MintPhoton(request: MsgMintPhoton): Promise<MsgMintPhotonResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/photon
     * module parameters. The authority is defined in the keeper.
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
