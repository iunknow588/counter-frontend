import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "babylon.btclightclient.v1";
/**
 * BTCHeaderInfo is a structure that contains all relevant information about a
 * BTC header
 *  - Full header bytes
 *  - Header hash for easy retrieval
 *  - Height of the header in the BTC chain
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 */
export interface BTCHeaderInfo {
    header: Uint8Array;
    hash: Uint8Array;
    height: number;
    work: Uint8Array;
}
export declare const BTCHeaderInfo: {
    encode(message: BTCHeaderInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCHeaderInfo;
    fromJSON(object: any): BTCHeaderInfo;
    toJSON(message: BTCHeaderInfo): unknown;
    fromPartial<I extends {
        header?: Uint8Array | undefined;
        hash?: Uint8Array | undefined;
        height?: number | undefined;
        work?: Uint8Array | undefined;
    } & {
        header?: Uint8Array | undefined;
        hash?: Uint8Array | undefined;
        height?: number | undefined;
        work?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof BTCHeaderInfo>, never>>(object: I): BTCHeaderInfo;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
