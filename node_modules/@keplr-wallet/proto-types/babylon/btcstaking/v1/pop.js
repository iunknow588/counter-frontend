"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BIP322Sig = exports.ProofOfPossessionBTC = exports.bTCSigTypeToJSON = exports.bTCSigTypeFromJSON = exports.BTCSigType = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "babylon.btcstaking.v1";
/** BTCSigType indicates the type of btc_sig in a pop */
var BTCSigType;
(function (BTCSigType) {
    /** BIP340 - BIP340 means the btc_sig will follow the BIP-340 encoding */
    BTCSigType[BTCSigType["BIP340"] = 0] = "BIP340";
    /** BIP322 - BIP322 means the btc_sig will follow the BIP-322 encoding */
    BTCSigType[BTCSigType["BIP322"] = 1] = "BIP322";
    /**
     * ECDSA - ECDSA means the btc_sig will follow the ECDSA encoding
     * ref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
     */
    BTCSigType[BTCSigType["ECDSA"] = 2] = "ECDSA";
    BTCSigType[BTCSigType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BTCSigType = exports.BTCSigType || (exports.BTCSigType = {}));
function bTCSigTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BIP340":
            return BTCSigType.BIP340;
        case 1:
        case "BIP322":
            return BTCSigType.BIP322;
        case 2:
        case "ECDSA":
            return BTCSigType.ECDSA;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BTCSigType.UNRECOGNIZED;
    }
}
exports.bTCSigTypeFromJSON = bTCSigTypeFromJSON;
function bTCSigTypeToJSON(object) {
    switch (object) {
        case BTCSigType.BIP340:
            return "BIP340";
        case BTCSigType.BIP322:
            return "BIP322";
        case BTCSigType.ECDSA:
            return "ECDSA";
        default:
            return "UNKNOWN";
    }
}
exports.bTCSigTypeToJSON = bTCSigTypeToJSON;
function createBaseProofOfPossessionBTC() {
    return { btcSigType: 0, btcSig: new Uint8Array() };
}
exports.ProofOfPossessionBTC = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.btcSigType !== 0) {
            writer.uint32(8).int32(message.btcSigType);
        }
        if (message.btcSig.length !== 0) {
            writer.uint32(18).bytes(message.btcSig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProofOfPossessionBTC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.btcSigType = reader.int32();
                    break;
                case 2:
                    message.btcSig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            btcSigType: isSet(object.btcSigType)
                ? bTCSigTypeFromJSON(object.btcSigType)
                : 0,
            btcSig: isSet(object.btcSig)
                ? bytesFromBase64(object.btcSig)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.btcSigType !== undefined &&
            (obj.btcSigType = bTCSigTypeToJSON(message.btcSigType));
        message.btcSig !== undefined &&
            (obj.btcSig = base64FromBytes(message.btcSig !== undefined ? message.btcSig : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseProofOfPossessionBTC();
        message.btcSigType = (_a = object.btcSigType) !== null && _a !== void 0 ? _a : 0;
        message.btcSig = (_b = object.btcSig) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseBIP322Sig() {
    return { address: "", sig: new Uint8Array() };
}
exports.BIP322Sig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.sig.length !== 0) {
            writer.uint32(18).bytes(message.sig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBIP322Sig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            sig: isSet(object.sig) ? bytesFromBase64(object.sig) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.sig !== undefined &&
            (obj.sig = base64FromBytes(message.sig !== undefined ? message.sig : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBIP322Sig();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.sig = (_b = object.sig) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=pop.js.map