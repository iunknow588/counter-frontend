/// <reference types="node" />
import { Buffer as NodeBuffer } from "buffer";
import { ECPairInterface } from "ecpair";
import { Network as BitcoinNetwork } from "bitcoinjs-lib";
export declare class PrivKeySecp256k1 {
    protected readonly privKey: Uint8Array;
    protected readonly masterFingerprint?: string | undefined;
    protected readonly path?: string | undefined;
    static generateRandomKey(): PrivKeySecp256k1;
    constructor(privKey: Uint8Array, masterFingerprint?: string | undefined, path?: string | undefined);
    toBytes(): Uint8Array;
    toKeyPair(): ECPairInterface;
    getPubKey(): PubKeySecp256k1;
    getBitcoinPubKey(network?: BitcoinNetwork): PubKeyBitcoinCompatible;
    signDigest32(digest: Uint8Array): {
        readonly r: Uint8Array;
        readonly s: Uint8Array;
        readonly v: number | null;
    };
}
export declare class PubKeyStarknet {
    protected readonly pubKey: Uint8Array;
    constructor(pubKey: Uint8Array);
    toBytes(): Uint8Array;
    getStarknetPubKey(): Uint8Array;
    getStarknetAddress(salt: Uint8Array, classHash: Uint8Array): Uint8Array;
    getStarknetAddressParams(): {
        readonly xLow: Uint8Array;
        readonly xHigh: Uint8Array;
        readonly yLow: Uint8Array;
        readonly yHigh: Uint8Array;
    };
}
export declare class PubKeySecp256k1 {
    protected readonly pubKey: Uint8Array;
    constructor(pubKey: Uint8Array);
    toBytes(uncompressed?: boolean): Uint8Array;
    toBitcoinPubKey(network?: BitcoinNetwork): PubKeyBitcoinCompatible;
    /**
     * @deprecated Use `getCosmosAddress()` instead.
     */
    getAddress(): Uint8Array;
    getCosmosAddress(): Uint8Array;
    getEthAddress(): Uint8Array;
    getStarknetAddress(salt: Uint8Array, classHash: Uint8Array): Uint8Array;
    getStarknetAddressParams(): {
        readonly xLow: Uint8Array;
        readonly xHigh: Uint8Array;
        readonly yLow: Uint8Array;
        readonly yHigh: Uint8Array;
    };
    getStarknetPubKey(): Uint8Array;
    verifyDigest32(digest: Uint8Array, signature: Uint8Array): boolean;
}
export declare class PubKeyBitcoinCompatible {
    protected readonly pubKey: Uint8Array;
    protected readonly network?: BitcoinNetwork | undefined;
    protected readonly masterFingerprint?: string | undefined;
    protected readonly path?: string | undefined;
    constructor(pubKey: Uint8Array, network?: BitcoinNetwork | undefined, masterFingerprint?: string | undefined, path?: string | undefined);
    toBytes(uncompressed?: boolean): Uint8Array;
    getMasterFingerprint(): string | undefined;
    getPath(): string | undefined;
    getBitcoinAddress(paymentType?: "legacy" | "native-segwit" | "taproot", network?: BitcoinNetwork): string | undefined;
    static fromExtendedKey(xpub: string, basePath: string, masterFingerprint?: string, additionalPath?: string, network?: BitcoinNetwork): PubKeyBitcoinCompatible;
}
/**
 * Converts a public key to an X-only public key.
 * @param pubKey The public key to convert.
 * @returns The X-only public key.
 */
export declare const toXOnly: (pubKey: NodeBuffer) => NodeBuffer;
