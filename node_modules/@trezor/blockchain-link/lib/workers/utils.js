"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolanaStakingData = exports.prioritizeEndpoints = void 0;
const tslib_1 = require("tslib");
const wallet_sdk_1 = require("@everstake/wallet-sdk");
const utils_1 = require("@trezor/utils");
const config_1 = tslib_1.__importDefault(require("./../ui/config"));
const prioritizeEndpoints = (urls) => urls
    .map((url) => {
    const hostname = (0, utils_1.parseHostname)(url);
    let priority = Math.random();
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
        priority += 2;
    }
    else if (hostname?.endsWith('.onion')) {
        priority += 1;
    }
    return [url, priority];
})
    .sort(([, a], [, b]) => b - a)
    .map(([url]) => url);
exports.prioritizeEndpoints = prioritizeEndpoints;
const getSolanaStakingData = async (descriptor, isTestnet) => {
    const blockchainEnvironment = isTestnet ? 'devnet' : 'mainnet';
    const blockchainConfig = config_1.default.find(c => c.blockchain.name.toLowerCase().includes(`solana ${blockchainEnvironment}`));
    const serverUrl = blockchainConfig?.blockchain.server[0];
    const network = isTestnet ? wallet_sdk_1.SolNetwork.Devnet : wallet_sdk_1.SolNetwork.Mainnet;
    const solanaClient = new wallet_sdk_1.Solana(network, serverUrl);
    const delegations = await solanaClient.getDelegations(descriptor);
    if (!delegations || !delegations.result) {
        throw new Error('Failed to fetch delegations');
    }
    const { result: stakingAccounts } = delegations;
    return { stakingAccounts };
};
exports.getSolanaStakingData = getSolanaStakingData;
//# sourceMappingURL=utils.js.map