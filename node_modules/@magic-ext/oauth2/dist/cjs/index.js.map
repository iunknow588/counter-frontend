{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/types.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport { Extension } from '@magic-sdk/commons';\nimport {\n  OAuthErrorData,\n  OAuthRedirectError,\n  OAuthRedirectResult,\n  OAuthRedirectConfiguration,\n  OAuthPayloadMethods,\n  OAuthRedirectStartResult,\n} from './types';\n\nexport class OAuthExtension extends Extension.Internal<'oauth2'> {\n  name = 'oauth2' as const;\n  config = {};\n  compat = {\n    'magic-sdk': '>=2.4.6',\n    '@magic-sdk/react-native': false,\n    '@magic-sdk/react-native-bare': false,\n    '@magic-sdk/react-native-expo': false,\n  };\n\n  public loginWithRedirect(configuration: OAuthRedirectConfiguration) {\n    return this.utils.createPromiEvent<void>(async (resolve, reject) => {\n      const parseRedirectResult = this.utils.createJsonRpcRequestPayload(OAuthPayloadMethods.Start, [\n        {\n          ...configuration,\n          apiKey: this.sdk.apiKey,\n          platform: 'web',\n        },\n      ]);\n\n      const result = await this.request<OAuthRedirectStartResult | OAuthRedirectError>(parseRedirectResult);\n      const successResult = result as OAuthRedirectStartResult;\n      const errorResult = result as OAuthRedirectError;\n\n      if (errorResult.error) {\n        reject(\n          this.createError<OAuthErrorData>(errorResult.error, errorResult.error_description ?? 'An error occurred.', {\n            errorURI: errorResult.error_uri,\n            provider: errorResult.provider,\n          }),\n        );\n      }\n\n      if (successResult?.oauthAuthoriationURI) {\n        window.location.href = successResult.useMagicServerCallback\n          ? // @ts-ignore - this.sdk.endpoint is marked protected but we need to access it.\n            new URL(successResult.oauthAuthoriationURI, this.sdk.endpoint).href\n          : successResult.oauthAuthoriationURI;\n      }\n\n      resolve();\n    });\n  }\n\n  public getRedirectResult(lifespan?: number) {\n    const queryString = window.location.search;\n\n    // Remove the query from the redirect callback as a precaution to prevent\n    // malicious parties from parsing it before we have a chance to use it.\n    const urlWithoutQuery = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, '', urlWithoutQuery);\n\n    return getResult.call(this, queryString, lifespan);\n  }\n}\n\nfunction getResult(this: OAuthExtension, queryString: string, lifespan?: number) {\n  return this.utils.createPromiEvent<OAuthRedirectResult>(async (resolve, reject) => {\n    const parseRedirectResult = this.utils.createJsonRpcRequestPayload(OAuthPayloadMethods.Verify, [\n      {\n        authorizationResponseParams: queryString,\n        magicApiKey: this.sdk.apiKey,\n        platform: 'web',\n        lifespan,\n      },\n    ]);\n\n    // Parse the result, which may contain an OAuth-formatted error.\n    const resultOrError = await this.request<OAuthRedirectResult | OAuthRedirectError>(parseRedirectResult);\n    const maybeResult = resultOrError as OAuthRedirectResult;\n    const maybeError = resultOrError as OAuthRedirectError;\n\n    if (maybeError.error) {\n      reject(\n        this.createError<OAuthErrorData>(maybeError.error, maybeError.error_description ?? 'An error occurred.', {\n          errorURI: maybeError.error_uri,\n          provider: maybeError.provider,\n        }),\n      );\n    }\n\n    resolve(maybeResult);\n  });\n}\n\nexport * from './types';\n", "import { MagicUserMetadata } from '@magic-sdk/types';\n\nexport enum OAuthPayloadMethods {\n  Start = 'magic_oauth_login_with_redirect_start',\n  Verify = 'magic_oauth_login_with_redirect_verify',\n}\n\nexport type OAuthProvider =\n  | 'google'\n  | 'facebook'\n  | 'apple'\n  | 'github'\n  | 'bitbucket'\n  | 'gitlab'\n  | 'linkedin'\n  | 'twitter'\n  | 'discord'\n  | 'twitch'\n  | 'microsoft';\n\nexport interface OAuthErrorData {\n  provider: OAuthProvider;\n  errorURI?: string;\n}\n\nexport interface OpenIDConnectProfile {\n  name?: string;\n  familyName?: string;\n  givenName?: string;\n  middleName?: string;\n  nickname?: string;\n  preferredUsername?: string;\n  profile?: string;\n  picture?: string;\n  website?: string;\n  gender?: string;\n  birthdate?: string;\n  zoneinfo?: string;\n  locale?: string;\n  updatedAt?: number;\n}\n\nexport interface OpenIDConnectEmail {\n  email?: string;\n  emailVerified?: boolean;\n}\n\nexport interface OpenIDConnectPhone {\n  phoneNumber?: string;\n  phoneNumberVerified?: boolean;\n}\n\nexport interface OpenIDConnectAddress {\n  address?: {\n    formatted?: string;\n    streetAddress?: string;\n    locality?: string;\n    region?: string;\n    postalCode?: string;\n    country?: string;\n  };\n}\n\nexport type OpenIDConnectUserInfo = OpenIDConnectProfile &\n  OpenIDConnectEmail &\n  OpenIDConnectPhone &\n  OpenIDConnectAddress & { sub?: string; sources?: Record<string, any> } & Record<string, any>;\n\nexport interface OAuthRedirectStartResult {\n  oauthAuthoriationURI?: string;\n  useMagicServerCallback?: boolean;\n}\n\nexport interface OAuthRedirectResult {\n  oauth: {\n    provider: OAuthProvider;\n    scope: string[];\n    userHandle: string;\n    userInfo: OpenIDConnectUserInfo;\n  };\n  magic: {\n    idToken: string;\n    userMetadata: MagicUserMetadata;\n  };\n}\n\nexport interface OAuthRedirectError {\n  provider: OAuthProvider;\n  error: string;\n  error_description?: string;\n  error_uri?: string;\n}\n\nexport interface OAuthRedirectConfiguration {\n  provider: OAuthProvider;\n  redirectURI: string;\n  scope?: string[];\n  loginHint?: string;\n}\n\nexport enum OAuthErrorCode {\n  InvalidRequest = 'invalid_request',\n  InvalidClient = 'invalid_client',\n  InvalidScope = 'invalid_scope',\n  InvalidGrant = 'invalid_grant',\n  UnauthorizedClient = 'unauthorized_client',\n  UnsupportedResponseType = 'unsupported_response_type',\n  UnsupportedGrantType = 'unsupported_grant_type',\n  UnsupportedTokenType = 'unsupported_token_type',\n  AccessDenied = 'access_denied',\n  ServerError = 'server_error',\n  TemporarilyUnavailable = 'temporarily_unavailable',\n}\n"],
  "mappings": "i9BAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,mBAAAC,EAAA,wBAAAC,IAAA,eAAAC,EAAAL,GAEA,IAAAM,EAA0B,8BCAnB,IAAKC,OACVA,EAAA,MAAQ,wCACRA,EAAA,OAAS,yCAFCA,OAAA,IAkGAC,OACVA,EAAA,eAAiB,kBACjBA,EAAA,cAAgB,iBAChBA,EAAA,aAAe,gBACfA,EAAA,aAAe,gBACfA,EAAA,mBAAqB,sBACrBA,EAAA,wBAA0B,4BAC1BA,EAAA,qBAAuB,yBACvBA,EAAA,qBAAuB,yBACvBA,EAAA,aAAe,gBACfA,EAAA,YAAc,eACdA,EAAA,uBAAyB,0BAXfA,OAAA,IDxFL,IAAMC,EAAN,cAA6B,YAAU,QAAmB,CAA1D,kCACL,UAAO,SACP,YAAS,CAAC,EACV,YAAS,CACP,YAAa,UACb,0BAA2B,GAC3B,+BAAgC,GAChC,+BAAgC,EAClC,EAEO,kBAAkBC,EAA2C,CAClE,OAAO,KAAK,MAAM,iBAAuB,CAAOC,EAASC,IAAWC,EAAA,sBAvBxE,IAAAC,EAwBM,IAAMC,EAAsB,KAAK,MAAM,oEAAuD,CAC5FC,EAAAC,EAAA,GACKP,GADL,CAEE,OAAQ,KAAK,IAAI,OACjB,SAAU,KACZ,EACF,CAAC,EAEKQ,EAAS,MAAM,KAAK,QAAuDH,CAAmB,EAC9FI,EAAgBD,EAChBE,EAAcF,EAEhBE,EAAY,OACdR,EACE,KAAK,YAA4BQ,EAAY,OAAON,EAAAM,EAAY,oBAAZ,KAAAN,EAAiC,qBAAsB,CACzG,SAAUM,EAAY,UACtB,SAAUA,EAAY,QACxB,CAAC,CACH,EAGED,GAAA,MAAAA,EAAe,uBACjB,OAAO,SAAS,KAAOA,EAAc,uBAEjC,IAAI,IAAIA,EAAc,qBAAsB,KAAK,IAAI,QAAQ,EAAE,KAC/DA,EAAc,sBAGpBR,EAAQ,CACV,EAAC,CACH,CAEO,kBAAkBU,EAAmB,CAC1C,IAAMC,EAAc,OAAO,SAAS,OAI9BC,EAAkB,OAAO,SAAS,OAAS,OAAO,SAAS,SACjE,cAAO,QAAQ,aAAa,KAAM,GAAIA,CAAe,EAE9CC,EAAU,KAAK,KAAMF,EAAaD,CAAQ,CACnD,CACF,EAEA,SAASG,EAAgCF,EAAqBD,EAAmB,CAC/E,OAAO,KAAK,MAAM,iBAAsC,CAAOV,EAASC,IAAWC,EAAA,sBArErF,IAAAC,EAsEI,IAAMC,EAAsB,KAAK,MAAM,qEAAwD,CAC7F,CACE,4BAA6BO,EAC7B,YAAa,KAAK,IAAI,OACtB,SAAU,MACV,SAAAD,CACF,CACF,CAAC,EAGKI,EAAgB,MAAM,KAAK,QAAkDV,CAAmB,EAChGW,EAAcD,EACdE,EAAaF,EAEfE,EAAW,OACbf,EACE,KAAK,YAA4Be,EAAW,OAAOb,EAAAa,EAAW,oBAAX,KAAAb,EAAgC,qBAAsB,CACvG,SAAUa,EAAW,UACrB,SAAUA,EAAW,QACvB,CAAC,CACH,EAGFhB,EAAQe,CAAW,CACrB,EAAC,CACH",
  "names": ["src_exports", "__export", "OAuthErrorCode", "OAuthExtension", "OAuthPayloadMethods", "__toCommonJS", "import_commons", "OAuthPayloadMethods", "OAuthErrorCode", "OAuthExtension", "configuration", "resolve", "reject", "__async", "_a", "parseRedirectResult", "__spreadProps", "__spreadValues", "result", "successResult", "errorResult", "lifespan", "queryString", "urlWithoutQuery", "getResult", "resultOrError", "maybeResult", "maybeError"]
}
